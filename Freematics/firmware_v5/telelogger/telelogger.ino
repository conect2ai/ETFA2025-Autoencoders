/******************************************************************************
* Arduino sketch of a vehicle data data logger and telemeter for Freematics Hub
* Works with Freematics ONE+ Model A and Model B
* Developed by Stanley Huang <stanley@freematics.com.au>
* Distributed under BSD license
* Visit https://freematics.com/products for hardware information
* Visit https://hub.freematics.com to view live and history telemetry data
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
* THE SOFTWARE.
******************************************************************************/

#include <FreematicsPlus.h>
#include <httpd.h>
#include "config.h"
#include "telestore.h"
#include "teleclient.h"
#include "telemesh.h"
#include <apps/sntp/sntp.h>
#include <SD.h>
#include "tensorflow/lite/micro/all_ops_resolver.h"
#include "tensorflow/lite/micro/micro_error_reporter.h"
#include "tensorflow/lite/micro/micro_interpreter.h"
#include "tensorflow/lite/micro/system_setup.h"
#include "tensorflow/lite/schema/schema_generated.h"
#include "encoder_c2.cc"
#if BOARD_HAS_PSRAM
#include "esp32/himem.h"
#endif
#include "driver/adc.h"
#include "nvs_flash.h"
#include "nvs.h"
#if ENABLE_OLED
#include "FreematicsOLED.h"
#endif

#undef INFO
#define INFO FREEMATICS_INFO

#undef INFO
#define INFO 0x01

// states
#define STATE_STORAGE_READY 0x1
#define STATE_OBD_READY 0x2
#define STATE_GPS_READY 0x4
#define STATE_MEMS_READY 0x8
#define STATE_NET_READY 0x10
#define STATE_CELL_CONNECTED 0x20
#define STATE_WIFI_CONNECTED 0x40
#define STATE_WORKING 0x80
#define STATE_STANDBY 0x100

byte x0_flag = 0xA0;
byte x1_flag = 0xA1;
byte x2_flag = 0xA2;
byte x3_flag = 0xA3;
byte x4_flag = 0xA4;
byte x5_flag = 0xA5;
byte x6_flag = 0xA6;
byte x7_flag = 0xA7;
byte x8_flag = 0xA8;
byte x9_flag = 0xA9;
byte x10_flag = 0xAA;
byte x11_flag = 0xAB;
byte x12_flag = 0xAC;
byte x13_flag = 0xAD;
byte x14_flag = 0xAE;

byte time_session_flag = 0xB8;

extern const unsigned char encoder_model_tflite[];
extern const unsigned int encoder_model_tflite_len;

int count_model = 0;
int count_date = 0;
int count_auto_encoder = 0;
bool has_51 = false;
bool has_52 = false;
bool made_prediction = false;
bool time_compared = false;

typedef struct {
  byte pid;
  byte tier;
  int value;
  uint32_t ts;
} PID_POLLING_INFO;

PID_POLLING_INFO obdData[]= {
  {PID_ENGINE_LOAD, 1},
  {PID_RPM, 1},
  {PID_SPEED, 1},
  {PID_THROTTLE, 1},
  {PID_TIMING_ADVANCE, 1},
};

// create a vector with 500 samples
// const float engine_load_t_2[500] = { 0.4980181, 0.28514057, 0.53416866, 0.5783073, 0.61046386, 0.51809037, 0.30118674, 0.5823012, 0.37751004, 0.23697591, 0.32125905, 0.25305423, 0.32125905, 0.31726506, 0.29719278, 0.19683133, 0.5020121, 0.17266266, 0.33733734, 0.048192773, 0.51, 0.3132711, 0.5622289, 0.1646747, 0.5622289, 0.4378012, 0.4578735, 0.15261044, 0.1646747, 0.040160645, 0.3132711, 0.369494, 0.325253, 0.31726506, 0.18075302, 0.554241, 0.23298194, 0.28510845, 0.17269076, 0.3253012, 0.26506025, 0.37748194, 0.59438556, 0.4217229, 0.4980181, 0.1646747, 0.5622289, 0.31726506, 0.13253012, 0.52607834, 0.20481928, 0.1646747, 0.048192773, 0.19683133, 0.22888555, 0.14056225, 0.68276507, 0.19683133, 0.24895784, 0.02811245, 0.16866867, 0.6466145, 0.14056225, 0.6666868, 0.325253, 0.15658434, 0.040160645, 0.3293494, 0.4578735, 0.3132711, 0.24496385, 0.5020121, 0.17266266, 0.54215664, 0.26503614, 0.30118674, 0.5622289, 0.24895784, 0.38956627, 0.34942168, 0.31726506, 0.4217229, 0.32125905, 0.23697591, 0.1646747, 0.040160645, 0.18072289, 0.53416866, 0.26104218, 0.41762653, 0.4217229, 0.23298194, 0.23697591, 0.2248996, 0.550247, 0.28920484, 0.5783073, 0.51, 0.040160645, 0.4899277, 0.31726506, 0.3132711, 0.5301205, 0.5140964, 0.2931988, 0.31726506, 0.184747, 0.17266266, 0.52208835, 0.17266266, 0.36546186, 0.16068073, 0.30522087, 0.31726506, 0.19273494, 0.46987954, 0.15658434, 0.24496385, 0.26903012, 0.20881326, 0.369494, 0.3253012, 0.040160645, 0.06827309, 0.3293494, 0.3293494, 0.17266266, 0.21280724, 0.27309236, 0.1124498, 0.13253012, 0.040160645, 0.3132711, 0.17266266, 0.26503614, 0.1646747, 0.17266266, 0.16866867, 0.20881326, 0.5300723, 0.24096988, 0.38147593, 0.34542772, 0.18075302, 0.16068073, 0.15259036, 0.19273494, 0.040160645, 0.38147593, 0.5622289, 0.26104218, 0.12048193, 0.37751004, 0.17665663, 0.048192773, 0.6506084, 0.048192773, 0.16068073, 0.38956627, 0.5622289, 0.16866867, 0.61046386, 0.24895784, 0.325253, 0.5300723, 0.22489157, 0.08032129, 0.2208976, 0.41762653, 0.2570482, 0.37348795, 0.30118674, 0.4016506, 0.41363254, 0.16068073, 0.30522087, 0.28514057, 0.29719278, 0.2008253, 0.30118674, 0.14056225, 0.3333434, 0.55823493, 0.32125905, 0.2008253, 0.5300723, 0.3333434, 0.34942168, 0.02811245, 0.4980181, 0.25305423, 0.369494, 0.17266266, 0.1646747, 0.46186748, 0.30118674, 0.1646747, 0.24096988, 0.5461506, 0.040160645, 0.2248996, 0.16064258, 0.48593375, 0.040160645, 0.47384942, 0.32125905, 0.32125905, 0.44578916, 0.2208976, 0.08032129, 0.5662229, 0.060240965, 0.184747, 0.23298194, 0.4779458, 0.61445785, 0.38147593, 0.38956627, 0.20481928, 0.26903012, 0.4779458, 0.6345301, 0.53816265, 0.52208436, 0.040160645, 0.23697591, 0.16068073, 0.53816265, 0.35742974, 0.34133133, 0.4417952, 0.5823012, 0.24096988, 0.5461506, 0.5622289, 0.10040161, 0.16064258, 0.1646747, 0.25305423, 0.048192773, 0.2208976, 0.32125905, 0.5662229, 0.4940241, 0.048192773, 0.32125905, 0.24895784, 0.63053614, 0.048192773, 0.48593375, 0.20481928, 0.4578735, 0.24497992, 0.3333434, 0.2208976, 0.16068073, 0.325253, 0.17266266, 0.26903012, 0.12048193, 0.325253, 0.2248996, 0.2570482, 0.16866867, 0.47384942, 0.28514057, 0.16068073, 0.16068073, 0.19273494, 0.25305423, 0.16866867, 0.30927712, 0.18875502, 0.26903012, 0.60646987, 0.19273494, 0.2931988, 0.13253012, 0.048192773, 0.23697591, 0.325253, 0.040160645, 0.23697591, 0.19277109, 0.16866867, 0.2208976, 0.16866867, 0.47384942, 0.048192773, 0.6265422, 0.26506025, 0.30927712, 0.1646747, 0.18072289, 0.23697591, 0.17269076, 0.02811245, 0.25305423, 0.13253012, 0.048192773, 0.55823493, 0.38956627, 0.31726506, 0.5903916, 0.24895784, 0.44578916, 0.369494, 0.28510845, 0.2931988, 0.2731265, 0.17266266, 0.184747, 0.20881326, 0.7269036, 0.184747, 0.10040161, 0.33733734, 0.50600606, 0.4056446, 0.37751004, 0.16866867, 0.34542772, 0.16068073, 0.28920484, 0.24895784, 0.26104417, 0.16068073, 0.32125905, 0.554241, 0.13253012, 0.44578916, 0.369494, 0.16866867, 0.040160645, 0.5300723, 0.3333434, 0.3172691, 0.4217229, 0.3333434, 0.32125905, 0.20481928, 0.184747, 0.550247, 0.24096988, 0.3132711, 0.42571688, 0.28510845, 0.3333434, 0.20080322, 0.26903012, 0.36546186, 0.44978315, 0.1646747, 0.43370482, 0.2128514, 0.16866867, 0.048192773, 0.19273494, 0.26104218, 0.30927712, 0.040160645, 0.1124498, 0.51809037, 0.26506025, 0.5743133, 0.20481928, 0.18072289, 0.19683133, 0.06827309, 0.23298194, 0.61445785, 0.52208436, 0.25305423, 0.10040161, 0.5300723, 0.16068073, 0.54215664, 0.2208976, 0.5862952, 0.47384942, 0.16068073, 0.13651206, 0.17266266, 0.17665663, 0.16068073, 0.52208436, 0.19683133, 0.6265422, 0.26503614, 0.8514056, 0.24895784, 0.040160645, 0.16068073, 0.184747, 0.040160645, 0.20481928, 0.2208976, 0.048192773, 0.40963855, 0.048192773, 0.17266266, 0.45783135, 0.46186748, 0.16068073, 0.51809037, 0.554241, 0.24895784, 0.25305423, 0.24895784, 0.31726506, 0.13253012, 0.37348795, 0.048192773, 0.53416866, 0.22888555, 0.28920484, 0.18072289, 0.32125905, 0.040160645, 0.15658434, 0.7108253, 0.16068073, 0.5461506, 0.34542772, 0.24096988, 0.08835342, 0.23697591, 0.6506084, 0.3132711, 0.5703193, 0.5461506, 0.31726506, 0.325253, 0.325253, 0.3132711, 0.46987954, 0.184747, 0.20881326, 0.19683133, 0.14056225, 0.16068073, 0.16068073, 0.39759037, 0.16068073, 0.1646747, 0.28510845, 0.3132711, 0.61845183, 0.5783073, 0.5662229, 0.06827309, 0.048192773, 0.24096988, 0.39356026, 0.53816265, 0.4417952, 0.16064258, 0.5783073, 0.3172691, 0.31726506, 0.16068073, 0.15259036, 0.61845183, 0.24496385, 0.3132711, 0.5703193, 0.040160645, 0.39755422, 0.15658434, 0.16866867, 0.51, 0.34538153, 0.46586147, 0.5622289, 0.48593375, 0.55823493, 0.16064258, 0.24895784, 0.44978315, 0.2931727, 0.15259036, 0.048192773, 0.2570482, 0.25305423, 0.4899277, 0.26503614, 0.69884336, 0.040160645, 0.42571688, 0.23697591, 0.2731265, 0.2931988, 0.16866867, 0.32125905, 0.58232933, 0.28510845, 0.23298194, 0.5300723, 0.369494, 0.5743133};
// const float engine_load_t_1[500] = { 0.4980181, 0.27309236, 0.53416866, 0.5662229, 0.550247, 0.5662229, 0.22888555, 0.17665663, 0.33333334, 0.23697591, 0.34942168, 0.32125905, 0.325253, 0.31726506, 0.29719278, 0.19683133, 0.4417952, 0.25305423, 0.33733734, 0.040160645, 0.51, 0.325253, 0.59837955, 0.16068073, 0.4537771, 0.41762653, 0.4578735, 0.15261044, 0.1646747, 0.040160645, 0.5020121, 0.369494, 0.31726506, 0.31726506, 0.26903012, 0.5020121, 0.23298194, 0.28510845, 0.17269076, 0.3253012, 0.27309236, 0.46985543, 0.59438556, 0.54215664, 0.42571688, 0.1646747, 0.5743133, 0.23298194, 0.13253012, 0.550247, 0.22489157, 0.23697591, 0.048192773, 0.19683133, 0.1646747, 0.13253012, 0.554241, 0.19683133, 0.18874097, 0.040160645, 0.16068073, 0.6546024, 0.15261044, 0.63053614, 0.32125905, 0.24496385, 0.040160645, 0.29719278, 0.41762653, 0.31726506, 0.31726506, 0.5020121, 0.17266266, 0.54215664, 0.26503614, 0.26104218, 0.35740966, 0.2931988, 0.46586147, 0.26903012, 0.32125905, 0.4217229, 0.325253, 0.23697591, 0.16068073, 0.040160645, 0.18072289, 0.5862952, 0.2570482, 0.16068073, 0.4417952, 0.23298194, 0.41762653, 0.2248996, 0.550247, 0.28920484, 0.60646987, 0.4899277, 0.040160645, 0.5300723, 0.28510845, 0.2931988, 0.5301205, 0.69075304, 0.17266266, 0.2931988, 0.19273494, 0.16866867, 0.52208835, 0.16866867, 0.26506025, 0.16068073, 0.27309236, 0.3132711, 0.16068073, 0.46987954, 0.1646747, 0.24496385, 0.34942168, 0.184747, 0.369494, 0.3253012, 0.040160645, 0.060240965, 0.3132711, 0.42571688, 0.1646747, 0.24096988, 0.27309236, 0.12048193, 0.1124498, 0.040160645, 0.32125905, 0.17266266, 0.26503614, 0.16068073, 0.17266266, 0.16866867, 0.184747, 0.5300723, 0.24096988, 0.25305423, 0.34133133, 0.18075302, 0.1646747, 0.1646747, 0.17266266, 0.040160645, 0.38147593, 0.24096988, 0.30927712, 0.14056225, 0.37751004, 0.1646747, 0.048192773, 0.39755422, 0.048192773, 0.3333434, 0.46586147, 0.5622289, 0.16866867, 0.6023735, 0.24895784, 0.32125905, 0.35740966, 0.19683133, 0.08835342, 0.25305423, 0.2570482, 0.51, 0.5020121, 0.24895784, 0.4016506, 0.4980181, 0.1646747, 0.30522087, 0.28514057, 0.26503614, 0.28920484, 0.41363254, 0.14056225, 0.22888555, 0.61845183, 0.32125905, 0.30118674, 0.54215664, 0.22888555, 0.30518073, 0.02811245, 0.59837955, 0.25305423, 0.5300723, 0.2208976, 0.16068073, 0.46186748, 0.33733734, 0.1646747, 0.26503614, 0.32125905, 0.02811245, 0.2248996, 0.14056225, 0.46985543, 0.040160645, 0.53416866, 0.31726506, 0.32125905, 0.44578916, 0.52607834, 0.08032129, 0.41762653, 0.06827309, 0.2008253, 0.22888555, 0.4578735, 0.6385241, 0.26903012, 0.21690361, 0.19277109, 0.2731265, 0.4779458, 0.44578916, 0.53816265, 0.5703193, 0.040160645, 0.26104218, 0.16068073, 0.39356026, 0.3172691, 0.34133133, 0.53816265, 0.55823493, 0.2771205, 0.369494, 0.5622289, 0.08835342, 0.18072289, 0.22888555, 0.2771205, 0.060240965, 0.22489157, 0.3132711, 0.2771205, 0.3333434, 0.048192773, 0.32125905, 0.23697591, 0.63053614, 0.048192773, 0.43370482, 0.26503614, 0.4417952, 0.25301206, 0.3333434, 0.16068073, 0.1646747, 0.325253, 0.53416866, 0.24895784, 0.12048193, 0.32125905, 0.2248996, 0.44578916, 0.17266266, 0.47384942, 0.28514057, 0.16068073, 0.16068073, 0.184747, 0.1646747, 0.51, 0.30518073, 0.18875502, 0.26903012, 0.1646747, 0.18874097, 0.2931988, 0.13253012, 0.048192773, 0.23697591, 0.32125905, 0.040160645, 0.22888555, 0.19277109, 0.3655, 0.2208976, 0.17665663, 0.47384942, 0.048192773, 0.52607834, 0.24497992, 0.30927712, 0.1646747, 0.19277109, 0.23697591, 0.18072289, 0.06827309, 0.24895784, 0.14056225, 0.040160645, 0.5743133, 0.38956627, 0.31726506, 0.25305423, 0.40963855, 0.20881326, 0.369494, 0.28510845, 0.2931988, 0.2731265, 0.17266266, 0.184747, 0.1646747, 0.70683134, 0.18075302, 0.08032129, 0.33733734, 0.4217229, 0.3655, 0.36546186, 0.16866867, 0.3333434, 0.16068073, 0.28920484, 0.24496385, 0.26104417, 0.53816265, 0.32125905, 0.55823493, 0.14056225, 0.4940241, 0.2570482, 0.16068073, 0.040160645, 0.5300723, 0.3293494, 0.3172691, 0.369494, 0.3333434, 0.325253, 0.19277109, 0.184747, 0.550247, 0.24096988, 0.34133133, 0.19683133, 0.33733734, 0.32125905, 0.20080322, 0.51809037, 0.36546186, 0.30927712, 0.17665663, 0.32125905, 0.2128514, 0.17665663, 0.048192773, 0.18874097, 0.26104218, 0.32125905, 0.040160645, 0.08835342, 0.53816265, 0.18072289, 0.5743133, 0.20481928, 0.17269076, 0.22489157, 0.060240965, 0.3132711, 0.61845183, 0.52208436, 0.25305423, 0.10040161, 0.5783073, 0.46586147, 0.40963855, 0.24496385, 0.5862952, 0.4056446, 0.15259036, 0.13651206, 0.1646747, 0.18075302, 0.20481928, 0.48593375, 0.23298194, 0.5622289, 0.26503614, 0.8514056, 0.24895784, 0.040160645, 0.1646747, 0.46586147, 0.040160645, 0.2128514, 0.26903012, 0.048192773, 0.19683133, 0.048192773, 0.17266266, 0.45783135, 0.46985543, 0.2008253, 0.5140964, 0.5903916, 0.24895784, 0.24895784, 0.26104218, 0.325253, 0.1124498, 0.19683133, 0.048192773, 0.53416866, 0.24895784, 0.325253, 0.18072289, 0.32125905, 0.040160645, 0.40963855, 0.5783073, 0.1646747, 0.5300723, 0.34542772, 0.23697591, 0.08835342, 0.23298194, 0.6666868, 0.3132711, 0.63053614, 0.68276507, 0.24096988, 0.325253, 0.32125905, 0.2208976, 0.46987954, 0.184747, 0.18075302, 0.21280724, 0.15261044, 0.16068073, 0.16068073, 0.38554218, 0.22489157, 0.16068073, 0.35341567, 0.3132711, 0.59438556, 0.61445785, 0.5461506, 0.06827309, 0.048192773, 0.24496385, 0.52607834, 0.5300723, 0.4417952, 0.16064258, 0.5783073, 0.3253012, 0.24895784, 0.18075302, 0.15259036, 0.6023735, 0.23697591, 0.30927712, 0.54215664, 0.040160645, 0.39755422, 0.16866867, 0.1646747, 0.42571688, 0.34538153, 0.5703193, 0.4217229, 0.53416866, 0.2931988, 0.16064258, 0.24895784, 0.5743133, 0.26506025, 0.20881326, 0.048192773, 0.26503614, 0.2570482, 0.47384942, 0.26503614, 0.6666868, 0.040160645, 0.5823012, 0.2731265, 0.2731265, 0.2931988, 0.5862952, 0.3132711, 0.58232933, 0.1646747, 0.28510845, 0.5862952, 0.369494, 0.48193976};
// const float engine_load_t[500] = { 0.46840537, 0.26557112, 0.47657943, 0.5617346, 0.54559344, 0.56587344, 0.23311625, 0.16813755, 0.3264354, 0.22908096, 0.28588557, 0.54559344, 0.31423616, 0.4887888, 0.38325015, 0.24118686, 0.4887888, 0.26146683, 0.33048084, 0.030229256, 0.47657943, 0.31827146, 0.594224, 0.15199634, 0.41160074, 0.41160074, 0.23311625, 0.14384256, 0.4440901, 0.030229256, 0.48061475, 0.2046622, 0.31020087, 0.23715156, 0.24118686, 0.43601948, 0.22908096, 0.2777115, 0.16413066, 0.330493, 0.2574559, 0.4319842, 0.6713086, 0.4481254, 0.16006695, 0.15603165, 0.60239804, 0.22504565, 0.123554476, 0.57394403, 0.15603165, 0.22908096, 0.038344495, 0.14785758, 0.15603165, 0.123554476, 0.42381012, 0.18438223, 0.36297017, 0.050517347, 0.16006695, 0.56587344, 0.14384256, 0.663238, 0.31827146, 0.22504565, 0.030229256, 0.37921485, 0.4481254, 0.31423616, 0.31423616, 0.42784542, 0.22504565, 0.24118686, 0.25339624, 0.25743154, 0.3547961, 0.31827146, 0.46033478, 0.24118686, 0.31423616, 0.29799148, 0.31827146, 0.22504565, 0.15199634, 0.030229256, 0.17224589, 0.5820146, 0.2046622, 0.15199634, 0.43601948, 0.22908096, 0.3750761, 0.22499493, 0.4481254, 0.30213025, 0.39545953, 0.34672552, 0.030229256, 0.52521, 0.23715156, 0.23311625, 0.52525866, 0.663238, 0.15199634, 0.28588557, 0.18438223, 0.17227633, 0.5171434, 0.21283628, 0.22499493, 0.13575168, 0.2574559, 0.30616555, 0.15199634, 0.46439442, 0.15603165, 0.25339624, 0.44005477, 0.17631163, 0.46840537, 0.31832016, 0.030229256, 0.050517347, 0.31827146, 0.5617346, 0.15603165, 0.3547961, 0.26557112, 0.11138162, 0.058632582, 0.030229256, 0.31423616, 0.2696409, 0.15603165, 0.16006695, 0.26146683, 0.15603165, 0.17631163, 0.42784542, 0.2656056, 0.20062691, 0.33451614, 0.21283628, 0.15199634, 0.15603165, 0.15199634, 0.030229256, 0.4197748, 0.15199634, 0.30213025, 0.14384256, 0.37106916, 0.15603165, 0.038344495, 0.5171394, 0.038344495, 0.32644552, 0.31020087, 0.30616555, 0.18438223, 0.59825927, 0.27367622, 0.31827146, 0.22090688, 0.22504565, 0.09109353, 0.24532562, 0.4440901, 0.50493, 0.4968594, 0.22908096, 0.39545953, 0.36297017, 0.15603165, 0.29803205, 0.27774397, 0.25743154, 0.29799148, 0.44005477, 0.13166972, 0.25743154, 0.6185393, 0.31423616, 0.2939562, 0.5414547, 0.22090688, 0.29799148, 0.018056402, 0.594224, 0.24532562, 0.52117467, 0.22908096, 0.16006695, 0.15603165, 0.33048084, 0.15603165, 0.25743154, 0.31423616, 0.018056402, 0.2168797, 0.13166972, 0.1925563, 0.030229256, 0.5293488, 0.22908096, 0.31423616, 0.54962873, 0.4968594, 0.07080544, 0.56587344, 0.07080544, 0.24936093, 0.22090688, 0.24118686, 0.553664, 0.188521, 0.45629945, 0.18441875, 0.3386549, 0.4481254, 0.44005477, 0.52521, 0.5820146, 0.030229256, 0.31020087, 0.15199634, 0.38728547, 0.2858592, 0.32241023, 0.6064334, 0.553664, 0.2696409, 0.46840537, 0.54559344, 0.07080544, 0.17224589, 0.20880097, 0.33451614, 0.07080544, 0.16410226, 0.30616555, 0.24936093, 0.15199634, 0.038344495, 0.31423616, 0.18034694, 0.62267804, 0.038344495, 0.42784542, 0.25743154, 0.36297017, 0.26557112, 0.24936093, 0.15199634, 0.16410226, 0.31423616, 0.5293488, 0.24532562, 0.11138162, 0.22908096, 0.2168797, 0.44005477, 0.15199634, 0.33451614, 0.27774397, 0.15603165, 0.15199634, 0.18034694, 0.14785758, 0.50493, 0.30616555, 0.107324004, 0.24936093, 0.15603165, 0.18034694, 0.1925563, 0.13166972, 0.038344495, 0.2939562, 0.31423616, 0.018056402, 0.1965916, 0.1965916, 0.47254413, 0.24936093, 0.28588557, 0.52117467, 0.030229256, 0.17227633, 0.22499493, 0.30616555, 0.15603165, 0.18441875, 0.16410226, 0.18441875, 0.058632582, 0.23715156, 0.13166972, 0.030229256, 0.56990874, 0.28185028, 0.31020087, 0.24532562, 0.46033478, 0.20062691, 0.32241023, 0.2939562, 0.18438223, 0.2696409, 0.17227633, 0.18438223, 0.15603165, 0.70379794, 0.17631163, 0.07892068, 0.16006695, 0.4157395, 0.3670055, 0.33860824, 0.3426902, 0.31020087, 0.15199634, 0.48465005, 0.23715156, 0.2615135, 0.39132077, 0.31827146, 0.5374194, 0.123554476, 0.62267804, 0.24936093, 0.16006695, 0.030229256, 0.4157395, 0.31827146, 0.31832016, 0.15603165, 0.33048084, 0.31827146, 0.18441875, 0.15199634, 0.2046622, 0.23715156, 0.33451614, 0.15199634, 0.33048084, 0.31020087, 0.19253398, 0.37921485, 0.35889634, 0.2656056, 0.26146683, 0.1275776, 0.1965916, 0.2696409, 0.030229256, 0.18034694, 0.24936093, 0.15603165, 0.030229256, 0.038344495, 0.39132077, 0.14384256, 0.553664, 0.1965916, 0.16413066, 0.21687157, 0.050517347, 0.30616555, 0.59825927, 0.5414547, 0.2696409, 0.09109353, 0.553664, 0.38728547, 0.31020087, 0.22908096, 0.36297017, 0.4197748, 0.15603165, 0.1235423, 0.13978697, 0.17227633, 0.1965916, 0.45226416, 0.36297017, 0.60239804, 0.3386549, 0.8498681, 0.23715156, 0.030229256, 0.16006695, 0.46033478, 0.030229256, 0.20470683, 0.26146683, 0.038344495, 0.46033478, 0.038344495, 0.15199634, 0.45222157, 0.28185028, 0.1925563, 0.5090688, 0.5617346, 0.2656056, 0.24118686, 0.25339624, 0.31827146, 0.07080544, 0.1925563, 0.038344495, 0.4928241, 0.24118686, 0.47254413, 0.17224589, 0.31423616, 0.030229256, 0.48465005, 0.6185393, 0.31827146, 0.52521, 0.16006695, 0.22908096, 0.07892068, 0.22908096, 0.6672733, 0.30213025, 0.62671334, 0.5576993, 0.22908096, 0.48061475, 0.31423616, 0.22090688, 0.46439442, 0.1965916, 0.188521, 0.2046622, 0.17224589, 0.15199634, 0.16006695, 0.3507811, 0.21687157, 0.15603165, 0.3547961, 0.2899209, 0.5901887, 0.59825927, 0.47657943, 0.058632582, 0.038344495, 0.23715156, 0.5171394, 0.5131041, 0.2939562, 0.15195781, 0.594224, 0.31832016, 0.23311625, 0.17227633, 0.15199634, 0.59825927, 0.23311625, 0.23311625, 0.5333841, 0.030229256, 0.3386549, 0.1965916, 0.15199634, 0.39949483, 0.3507811, 0.56587344, 0.39545953, 0.62267804, 0.15603165, 0.15195781, 0.24118686, 0.6672733, 0.23716778, 0.22090688, 0.038344495, 0.25339624, 0.24532562, 0.5333841, 0.24936093, 0.663238, 0.030229256, 0.553664, 0.33451614, 0.24118686, 0.31020087, 0.56587344, 0.2656056, 0.5780077, 0.15199634, 0.2777115, 0.5861534, 0.36297017, 0.47657943};

// const float rpm_t_2[500] = { 0.36626795, 0.70933014, 0.34055024, 0.41208133, 0.44126794, 0.36160287, 0.18899521, 0.3617225, 0.35933015, 0.18504785, 0.26483253, 0.47763157, 0.18983254, 0.5235646, 0.30933014, 0.1715311, 0.41100478, 0.22308612, 0.19497608, 0.43086123, 0.55885166, 0.19162679, 0.40131578, 0.24090908, 0.36100477, 0.43217704, 0.32368422, 0.4631579, 0.35442585, 0.36889952, 0.16543062, 0.39832535, 0.1965311, 0.18672249, 0.21638756, 0.40299043, 0.18229665, 0.35921052, 0.47248805, 0.48660287, 0.4875598, 0.41267943, 0.4424641, 0.35382774, 0.43959332, 0.3728469, 0.39461723, 0.18863636, 0.5126794, 0.39916268, 0.22105263, 0.21818182, 0.5138756, 0.31842107, 0.3283493, 0.44210526, 0.53660285, 0.17344497, 0.25191388, 0.23732057, 0.3686603, 0.40322965, 0.3722488, 0.57380384, 0.19641149, 0.28815788, 0.49401915, 0.33086124, 0.34593302, 0.18337321, 0.46339712, 0.33456936, 0.21638756, 0.36555025, 0.19258372, 0.18720096, 0.34210527, 0.19090909, 0.40466508, 0.22751196, 0.19389953, 0.41650718, 0.19294259, 0.19114833, 0.31267944, 0.36028707, 0.4875598, 0.4369617, 0.21961722, 0.326555, 0.42428228, 0.18050238, 0.22440192, 0.49808612, 0.43588516, 0.18839712, 0.4881579, 0.3318182, 0.384689, 0.33708134, 0.18851675, 0.18600479, 0.69880384, 0.5808613, 0.32177034, 0.18325359, 0.2242823, 0.24401914, 0.78708136, 0.32894737, 0.7555024, 0.3131579, 0.565311, 0.18504785, 0.37870812, 0.77464116, 0.24222489, 0.17942584, 0.2361244, 0.23289473, 0.3318182, 0.5095694, 0.34665072, 0.4318182, 0.17954545, 0.30311003, 0.309689, 0.21267943, 0.48062202, 0.33708134, 0.46961722, 0.30669856, 0.19270335, 0.3001196, 0.3307416, 0.34246412, 0.2180622, 0.22523923, 0.18564594, 0.3770335, 0.21471292, 0.3223684, 0.18361244, 0.24330144, 0.35789475, 0.37165073, 0.28923446, 0.48110047, 0.19832537, 0.36435407, 0.17990431, 0.35717702, 0.6145933, 0.24557416, 0.52129185, 0.39700958, 0.21913876, 0.36208135, 0.42380384, 0.4708134, 0.22452153, 0.47607654, 0.1888756, 0.19043063, 0.36578947, 0.22619617, 0.36267942, 0.2437799, 0.4283493, 0.24198565, 0.33241627, 0.1979665, 0.23600478, 0.41100478, 0.29485646, 0.6287081, 0.57679427, 0.3223684, 0.2034689, 0.22260766, 0.37392345, 0.4, 0.37930623, 0.19055024, 0.22511962, 0.35107654, 0.32595694, 0.1861244, 0.3423445, 0.36973685, 0.18026316, 0.3381579, 0.22200957, 0.27978468, 0.47679427, 0.18564594, 0.4485646, 0.18026316, 0.41566986, 0.35645932, 0.45980862, 0.5411483, 0.3986842, 0.4291866, 0.3645933, 0.18983254, 0.17966507, 0.3624402, 0.32404307, 0.35167465, 0.37763157, 0.41172248, 0.18050238, 0.17942584, 0.43863636, 0.39078948, 0.3318182, 0.36100477, 0.40502393, 0.190311, 0.3874402, 0.46758375, 0.38002393, 0.33720097, 0.45095694, 0.18492822, 0.32188997, 0.4423445, 0.57559806, 0.18289474, 0.34952152, 0.4293062, 0.18421052, 0.59712917, 0.47547847, 0.39354068, 0.42009568, 0.28456938, 0.18205741, 0.5521531, 0.22870813, 0.18588516, 0.35944977, 0.40382776, 0.6504785, 0.19318181, 0.190311, 0.42260766, 0.38229665, 0.3514354, 0.18313397, 0.34677035, 0.47248805, 0.19019139, 0.31686604, 0.32033494, 0.1812201, 0.25287083, 0.1819378, 0.43540668, 0.18899521, 0.49832535, 0.3307416, 0.3507177, 0.41913876, 0.43492824, 0.25155503, 0.32380384, 0.18313397, 0.334689, 0.33851674, 0.18528709, 0.36028707, 0.17990431, 0.44377992, 0.1770335, 0.31710526, 0.38349283, 0.5090909, 0.18205741, 0.18767942, 0.35454544, 0.25239235, 0.46746412, 0.31004784, 0.22930622, 0.21830143, 0.35239235, 0.38229665, 0.43540668, 0.5368421, 0.18851675, 0.36064592, 0.52248806, 0.42870814, 0.45885167, 0.23923445, 0.18516746, 0.39473686, 0.3514354, 0.5502392, 0.36686602, 0.18636364, 0.44138756, 0.3132775, 0.33313397, 0.319378, 0.2994019, 0.3242823, 0.18576555, 0.37188995, 0.17787081, 0.27523923, 0.4930622, 0.26339713, 0.40454546, 0.3151914, 0.39150718, 0.39019138, 0.7430622, 0.3132775, 0.21483253, 0.3202153, 0.4438995, 0.18755981, 0.35645932, 0.32033494, 0.18983254, 0.45921052, 0.454067, 0.41578948, 0.22978468, 0.24976076, 0.38086125, 0.44892344, 0.18050238, 0.5983254, 0.3095694, 0.18564594, 0.19222488, 0.4313397, 0.32571772, 0.42332536, 0.18708134, 0.18002392, 0.33995214, 0.20717703, 0.18767942, 0.19186603, 0.26267943, 0.6016746, 0.33660287, 0.37619618, 0.4763158, 0.50239235, 0.22045454, 0.21076556, 0.17320575, 0.18552631, 0.31913877, 0.21578947, 0.43660286, 0.41662678, 0.8064593, 0.42392343, 0.46004784, 0.39497608, 0.24904306, 0.70717704, 0.18971291, 0.40167463, 0.36722487, 0.31686604, 0.3777512, 0.37523922, 0.32105264, 0.39976075, 0.18157895, 0.3555024, 0.41710526, 0.31710526, 0.55263156, 0.36961722, 0.22464114, 0.3033493, 0.34389952, 0.26758373, 0.5105263, 0.19557416, 0.45992824, 0.17906699, 0.46291867, 0.22260766, 0.23277512, 0.3485646, 0.37679425, 0.22069378, 0.23014355, 0.44940192, 0.5181818, 0.23899521, 0.6411483, 0.22165072, 0.29952154, 0.3326555, 0.3465311, 0.27488038, 0.18253589, 0.3124402, 0.18098086, 0.4382775, 0.32476076, 0.52464116, 0.35035884, 0.36303827, 0.18229665, 0.45430622, 0.2083732, 0.3660287, 0.35179427, 0.64198565, 0.2277512, 0.4132775, 0.21758373, 0.17942584, 0.34473684, 0.18779904, 0.41339713, 0.18923445, 0.4799043, 0.425, 0.17990431, 0.3631579, 0.19354066, 0.190311, 0.70526314, 0.17559808, 0.22834928, 0.28708133, 0.47511962, 0.3235646, 0.24916267, 0.57751197, 0.2958134, 0.31578946, 0.18325359, 0.184689, 0.41578948, 0.44940192, 0.4708134, 0.50669855, 0.20358852, 0.18708134, 0.40514353, 0.36339712, 0.34760764, 0.4638756, 0.34940192, 0.52607656, 0.19007178, 0.29748803, 0.41339713, 0.43660286, 0.1965311, 0.18062201, 0.41160288, 0.40478468, 0.298445, 0.39485645, 0.3221292, 0.34904307, 0.5562201, 0.44055024, 0.3757177, 0.33803827, 0.33552632, 0.42751196, 0.1784689, 0.30155504, 0.7543062, 0.3917464, 0.5, 0.21399522, 0.18181819, 0.4105263, 0.22141148, 0.40681818, 0.4380383, 0.39282298, 0.184689, 0.20011961, 0.19294259, 0.39066985, 0.19066985, 0.8200957, 0.3144737, 0.22942583, 0.36507177, 0.3944976, 0.40095693 };
// const float rpm_t_1[500] = { 0.3402324, 0.71701765, 0.36129266, 0.39941904, 0.44650206, 0.36940208, 0.18252239, 0.36601308, 0.36359236, 0.18724279, 0.26325345, 0.48136044, 0.19208424, 0.4905592, 0.32340837, 0.17356572, 0.41491166, 0.22125393, 0.19777294, 0.43669814, 0.6976519, 0.19426289, 0.406076, 0.22694263, 0.34616315, 0.44069234, 0.36189786, 0.4691358, 0.34991527, 0.3735173, 0.34773663, 0.4030501, 0.20116195, 0.18809006, 0.2224643, 0.41563785, 0.18542726, 0.2855241, 0.47736627, 0.49310094, 0.49406922, 0.3828371, 0.4996369, 0.44141853, 0.3778746, 0.37726942, 0.39251998, 0.18700072, 0.52263373, 0.38586298, 0.26761076, 0.2207698, 0.51997095, 0.322198, 0.332244, 0.44952795, 0.5785524, 0.17792302, 0.29895908, 0.22052772, 0.39639312, 0.39699832, 0.37835875, 0.4962479, 0.18542726, 0.21907528, 0.50278383, 0.34386346, 0.3436214, 0.18300654, 0.3301864, 0.36698136, 0.22730574, 0.36988622, 0.18518518, 0.1798596, 0.32122973, 0.1889373, 0.40946501, 0.2302106, 0.19619946, 0.39711934, 0.19535221, 0.17877027, 0.31638828, 0.36649722, 0.5064149, 0.38767853, 0.2245219, 0.32062456, 0.42931494, 0.18845315, 0.39724037, 0.50399417, 0.4282256, 0.19317357, 0.5255386, 0.33575407, 0.38900992, 0.34107965, 0.19825707, 0.19619946, 0.708061, 0.50351006, 0.3218349, 0.18542726, 0.22839506, 0.22210118, 0.8010167, 0.23468894, 0.7625272, 0.31687242, 0.57056403, 0.18724279, 0.3587509, 0.78673446, 0.24509804, 0.18905833, 0.3563302, 0.3570564, 0.3190511, 0.51488745, 0.35076252, 0.44638103, 0.18700072, 0.36492375, 0.38416848, 0.24885015, 0.4848705, 0.3430162, 0.47833455, 0.30815783, 0.1949891, 0.3036795, 0.3167514, 0.34652627, 0.2198015, 0.23565723, 0.18784797, 0.3640765, 0.29278624, 0.3205035, 0.18821108, 0.22367465, 0.3513677, 0.37605906, 0.25623336, 0.486565, 0.32377148, 0.32837087, 0.18203825, 0.36189786, 0.62139916, 0.24848706, 0.52699107, 0.3318809, 0.2207698, 0.3373275, 0.41466957, 0.39784557, 0.26821592, 0.48172355, 0.19934641, 0.19268942, 0.32631323, 0.26918423, 0.35560396, 0.24667151, 0.4352457, 0.3002905, 0.41926894, 0.18106996, 0.23880416, 0.38077947, 0.32861292, 0.637618, 0.5812152, 0.3261922, 0.21556523, 0.31299928, 0.3798112, 0.28237715, 0.38380536, 0.20043573, 0.22778988, 0.38307917, 0.25925925, 0.18312757, 0.34616315, 0.3741225, 0.18240136, 0.3741225, 0.23541516, 0.27075768, 0.36540788, 0.18784797, 0.3409586, 0.18603244, 0.42060032, 0.3638344, 0.46332607, 0.5516824, 0.35935608, 0.4335512, 0.36891794, 0.19111595, 0.19268942, 0.38441056, 0.352336, 0.35754055, 0.38211086, 0.4170903, 0.18917938, 0.18639554, 0.3845316, 0.39542484, 0.31469378, 0.251634, 0.409344, 0.18082789, 0.36456063, 0.5366739, 0.36770758, 0.375817, 0.45509562, 0.19402082, 0.32631323, 0.4475914, 0.5850884, 0.1963205, 0.35548294, 0.335633, 0.18639554, 0.37993222, 0.44383925, 0.39917696, 0.44081336, 0.2879448, 0.18070684, 0.5572501, 0.22706367, 0.18809006, 0.24400872, 0.40861776, 0.6613411, 0.19571532, 0.19607843, 0.42350522, 0.38683128, 0.35959816, 0.181191, 0.33163884, 0.46792543, 0.19244735, 0.32062456, 0.32498184, 0.1889373, 0.25587025, 0.18772694, 0.436214, 0.18809006, 0.5030259, 0.42967805, 0.35487774, 0.416122, 0.4432341, 0.251634, 0.32776567, 0.17840716, 0.29786977, 0.32340837, 0.18748488, 0.36456063, 0.18905833, 0.36335027, 0.17913339, 0.3275236, 0.38562092, 0.53134835, 0.18833213, 0.1899056, 0.36165577, 0.2345679, 0.47664005, 0.3214718, 0.25514403, 0.21762285, 0.43282497, 0.38731542, 0.35378844, 0.54514647, 0.18942145, 0.33006537, 0.53183246, 0.32473978, 0.46865165, 0.24473493, 0.19038974, 0.40159768, 0.35390946, 0.46961996, 0.34749454, 0.1889373, 0.44250786, 0.35681432, 0.33708546, 0.32328734, 0.3093682, 0.32461873, 0.18155411, 0.2254902, 0.17998064, 0.22609538, 0.49891067, 0.22028564, 0.3570564, 0.31893003, 0.39615107, 0.35282013, 0.7513919, 0.23045267, 0.20213023, 0.32425562, 0.31287825, 0.18978456, 0.3606875, 0.3661341, 0.1755023, 0.43633503, 0.47034615, 0.4214476, 0.23251028, 0.22185911, 0.3832002, 0.4509804, 0.18445897, 0.6102639, 0.31699347, 0.1972888, 0.19281046, 0.43669814, 0.31784073, 0.36056644, 0.18736383, 0.18215929, 0.32001936, 0.20963447, 0.19317357, 0.18881626, 0.41418543, 0.61050594, 0.33067054, 0.35112563, 0.4638102, 0.5107722, 0.22198015, 0.20963447, 0.17465505, 0.19317357, 0.3093682, 0.21955943, 0.4439603, 0.36262405, 0.6332607, 0.44517067, 0.46598887, 0.39990318, 0.221496, 0.6961995, 0.19196321, 0.40280804, 0.38174775, 0.32062456, 0.3832002, 0.37969014, 0.34374243, 0.40813363, 0.18373275, 0.3718228, 0.3771484, 0.4077705, 0.49116436, 0.38211086, 0.23178408, 0.30694747, 0.36129266, 0.24679254, 0.43609294, 0.19789398, 0.4248366, 0.181191, 0.45848462, 0.22778988, 0.23553619, 0.3282498, 0.38102156, 0.22803195, 0.23384169, 0.35245705, 0.5272331, 0.26422173, 0.6497216, 0.39808762, 0.30307433, 0.36698136, 0.3695231, 0.2285161, 0.2006778, 0.30622125, 0.18312757, 0.44420236, 0.3282498, 0.5274752, 0.37593803, 0.36734447, 0.19268942, 0.46163157, 0.19402082, 0.36698136, 0.41696927, 0.5113774, 0.22573227, 0.38235295, 0.33381748, 0.18276447, 0.34955215, 0.1889373, 0.54018396, 0.19147906, 0.48559672, 0.43004116, 0.18131202, 0.37230694, 0.19111595, 0.18131202, 0.7162914, 0.18324861, 0.22440088, 0.29048657, 0.48172355, 0.3271605, 0.3194142, 0.5882353, 0.23166303, 0.31130478, 0.19523118, 0.18397482, 0.42072138, 0.53473735, 0.4945534, 0.5151295, 0.2067296, 0.18784797, 0.42580488, 0.36395547, 0.36020333, 0.4715565, 0.38501573, 0.53764224, 0.18240136, 0.23662551, 0.40643913, 0.44178164, 0.18324861, 0.18603244, 0.4164851, 0.40813363, 0.32837087, 0.27087873, 0.32365045, 0.33163884, 0.5611232, 0.45545873, 0.34471074, 0.42774147, 0.31384653, 0.43403533, 0.18361172, 0.3295812, 0.77124184, 0.23747277, 0.50520456, 0.2167756, 0.18312757, 0.3720649, 0.22403777, 0.563907, 0.44032922, 0.37267005, 0.1949891, 0.19934641, 0.18675865, 0.3996611, 0.19123699, 0.8303074, 0.29581216, 0.2228274, 0.38477367, 0.39917696, 0.39651415 };
// const float rpm_t[500] = { 0.3030796, 0.6925388, 0.32085627, 0.34163746, 0.39196295, 0.33575362, 0.14221331, 0.28818226, 0.34101152, 0.14596896, 0.23898348, 0.45130196, 0.15285428, 0.4509264, 0.27190787, 0.13607912, 0.38257387, 0.18164746, 0.15585878, 0.40660992, 0.61517274, 0.14396594, 0.36717576, 0.1864046, 0.30095142, 0.40923885, 0.30057585, 0.4376565, 0.3739359, 0.3372559, 0.31309465, 0.1822734, 0.15748623, 0.135328, 0.1835253, 0.3657987, 0.14596896, 0.20017526, 0.44817227, 0.46544817, 0.4641963, 0.33350024, 0.51377064, 0.40998998, 0.34426638, 0.32323486, 0.36204305, 0.14096144, 0.49724588, 0.3636705, 0.23022033, 0.1864046, 0.4897346, 0.28530297, 0.28329995, 0.42063093, 0.47996995, 0.141337, 0.26264396, 0.22884327, 0.30921382, 0.35115173, 0.34426638, 0.48835754, 0.1454682, 0.18465197, 0.47396094, 0.36442164, 0.30883825, 0.14784677, 0.28843266, 0.3329995, 0.19316475, 0.22095643, 0.14321482, 0.1394592, 0.28204808, 0.14972459, 0.3228593, 0.15010016, 0.14797196, 0.32135704, 0.15110165, 0.1424637, 0.2817977, 0.33550325, 0.4897346, 0.3544066, 0.1516024, 0.29744616, 0.3720581, 0.14559339, 0.36329493, 0.4744617, 0.33137205, 0.13645469, 0.5150225, 0.30095142, 0.35578367, 0.34839758, 0.15848774, 0.15635954, 0.68878317, 0.4742113, 0.28630444, 0.15172759, 0.19742113, 0.18314973, 0.7844266, 0.19103655, 0.7343515, 0.37080622, 0.5420631, 0.14872308, 0.3124687, 0.77015525, 0.18490236, 0.15973961, 0.41549826, 0.3227341, 0.28342515, 0.48447672, 0.31822735, 0.42138207, 0.14684527, 0.3308713, 0.32348523, 0.21081622, 0.45518276, 0.30921382, 0.45117676, 0.2716575, 0.15848774, 0.2675263, 0.19404106, 0.28743115, 0.28968453, 0.19717075, 0.13970956, 0.3147221, 0.25300452, 0.2849274, 0.15235353, 0.19216324, 0.33425137, 0.3422634, 0.21845268, 0.4529294, 0.28918377, 0.27003005, 0.14158738, 0.32824236, 0.59664494, 0.18277416, 0.49649474, 0.31334502, 0.18327491, 0.35002503, 0.32023033, 0.30858788, 0.21156736, 0.41537306, 0.18177266, 0.14509264, 0.27603906, 0.33875814, 0.3134702, 0.3505258, 0.41574863, 0.38244867, 0.3870806, 0.14334, 0.20042564, 0.3472709, 0.30045068, 0.614672, 0.55383074, 0.28042063, 0.17638959, 0.27716574, 0.34576866, 0.24011016, 0.3830746, 0.15686029, 0.2734101, 0.3496495, 0.22158237, 0.14283925, 0.31096646, 0.3565348, 0.14208813, 0.32436153, 0.19692038, 0.23435153, 0.29181272, 0.15210316, 0.2899349, 0.14584376, 0.3000751, 0.2714071, 0.4313971, 0.52929395, 0.20768653, 0.40410617, 0.35277918, 0.15110165, 0.1527291, 0.35340512, 0.31697547, 0.3207311, 0.32911867, 0.38758138, 0.15598397, 0.14584376, 0.3576615, 0.36241862, 0.2789184, 0.3760641, 0.37531298, 0.14046068, 0.32548824, 0.41324487, 0.3298698, 0.34464195, 0.42363545, 0.16061592, 0.28955933, 0.38057086, 0.56209314, 0.15648472, 0.32110667, 0.438658, 0.14847271, 0.3463946, 0.3994742, 0.36604908, 0.39884827, 0.2100651, 0.16612418, 0.52603906, 0.19028543, 0.1536054, 0.20580871, 0.3094642, 0.63895845, 0.15585878, 0.115047574, 0.38395092, 0.36079118, 0.31672508, 0.14083625, 0.28780672, 0.45768654, 0.14784677, 0.28630444, 0.28955933, 0.14884827, 0.41487232, 0.15172759, 0.40110165, 0.14308964, 0.4742113, 0.39784676, 0.31534803, 0.38382575, 0.4118678, 0.1935403, 0.29243866, 0.13345018, 0.2615173, 0.31084126, 0.15047571, 0.33049574, 0.16174261, 0.32098147, 0.14221331, 0.34764647, 0.35603404, 0.49724588, 0.1485979, 0.14221331, 0.32623935, 0.23209815, 0.45042562, 0.30070105, 0.18252379, 0.15973961, 0.35002503, 0.34576866, 0.26902854, 0.5225338, 0.14934902, 0.27290937, 0.5062594, 0.29556835, 0.442664, 0.23009515, 0.1495994, 0.37130696, 0.3174762, 0.4846019, 0.30983976, 0.14884827, 0.3217326, 0.32098147, 0.28317475, 0.2583876, 0.2734101, 0.26402104, 0.14233851, 0.25976464, 0.13395093, 0.18728092, 0.510641, 0.19041061, 0.32598898, 0.22045568, 0.29957438, 0.31835252, 0.7258388, 0.3854532, 0.16249374, 0.28718078, 0.3954682, 0.14584376, 0.32648975, 0.3321232, 0.13495243, 0.39984977, 0.44316474, 0.389334, 0.15335503, 0.1822734, 0.34877315, 0.35941413, 0.15135203, 0.5883826, 0.28129694, 0.15711066, 0.15110165, 0.40535805, 0.28880823, 0.32636455, 0.14697045, 0.15723586, 0.28442663, 0.16261894, 0.15322985, 0.14872308, 0.38182274, 0.5858788, 0.30045068, 0.27541313, 0.41011518, 0.4834752, 0.17864296, 0.16850275, 0.14146219, 0.15548323, 0.27228343, 0.17951928, 0.33124688, 0.3197296, 0.508012, 0.42263395, 0.4354031, 0.37030545, 0.19942413, 0.6564847, 0.1607411, 0.35378066, 0.3482724, 0.27028042, 0.35277918, 0.358663, 0.29131198, 0.29056084, 0.14121182, 0.32098147, 0.34351528, 0.37518778, 0.43277416, 0.34864798, 0.19041061, 0.28780672, 0.32711568, 0.20868804, 0.39997497, 0.14596896, 0.39283925, 0.14221331, 0.4168753, 0.1885328, 0.5194041, 0.2849274, 0.34802204, 0.17238358, 0.19003505, 0.41675013, 0.50075114, 0.18602905, 0.62568855, 0.4036054, 0.5398097, 0.3515273, 0.34789684, 0.19166249, 0.1822734, 0.27015522, 0.15122683, 0.3147221, 0.2929394, 0.49699548, 0.32736605, 0.2254632, 0.2417376, 0.43890837, 0.16061592, 0.32924387, 0.37669003, 0.4402854, 0.18690535, 0.35916373, 0.19829744, 0.14609414, 0.31597397, 0.14233851, 0.46306962, 0.14997496, 0.5454432, 0.54969954, 0.14171258, 0.35891336, 0.1495994, 0.14071107, 0.69829744, 0.1507261, 0.19328994, 0.1987982, 0.45418128, 0.29181272, 0.28868303, 0.5665999, 0.18039559, 0.27178267, 0.15523285, 0.1474712, 0.4560591, 0.5065098, 0.47884327, 0.4877316, 0.16574863, 0.14772159, 0.40160242, 0.32761642, 0.3207311, 0.44316474, 0.47971958, 0.51402104, 0.14208813, 0.18252379, 0.36016524, 0.387331, 0.1454682, 0.1464697, 0.45518276, 0.37456185, 0.2930646, 0.23610416, 0.29018527, 0.3164747, 0.53530294, 0.36429644, 0.36079118, 0.36842763, 0.28843266, 0.40110165, 0.14697045, 0.3872058, 0.75963944, 0.19904858, 0.47821733, 0.17814222, 0.14283925, 0.32774162, 0.18415123, 0.55232847, 0.4068603, 0.34464195, 0.15635954, 0.15197797, 0.15185279, 0.3668002, 0.15348022, 0.8122183, 0.25938907, 0.17463696, 0.34364045, 0.36629945, 0.35202804 };

// const float speed_t_2[500] = { 0.21774194, 0.62903225, 0.2016129, 0.43548387, 0.26612905, 0.3467742, 0.0, 0.28225806, 0.37903225, 0.0, 0.09677419, 0.3951613, 0.0, 0.41129032, 0.33870968, 0.0, 0.13709678, 0.088709675, 0.0, 0.6532258, 0.16129032, 0.0, 0.31451613, 0.33064517, 0.37903225, 0.33064517, 0.32258064, 0.7016129, 0.3548387, 0.44354838, 0.0, 0.10483871, 0.0, 0.0, 0.08064516, 0.22580644, 0.0, 0.12096774, 0.7177419, 0.7419355, 0.43548387, 0.09677419, 0.26612905, 0.032258064, 0.15322581, 0.33870968, 0.17741935, 0.0, 0.7822581, 0.26612905, 0.13709678, 0.18548387, 0.61290324, 0.41935483, 0.27419356, 0.67741936, 0.13709678, 0.0, 0.12096774, 0.30645162, 0.4032258, 0.33870968, 0.44354838, 0.37903225, 0.0, 0.18548387, 0.75, 0.11290322, 0.38709676, 0.0, 0.24193548, 0.14516129, 0.23387097, 0.22580644, 0.0, 0.0, 0.19354838, 0.0, 0.14516129, 0.016129032, 0.0, 0.088709675, 0.0, 0.0, 0.25, 0.42741936, 0.16935484, 0.29032257, 0.0, 0.3548387, 0.4032258, 0.0, 0.05645161, 0.7580645, 0.18548387, 0.0, 0.3467742, 0.33870968, 0.33870968, 0.25, 0.0, 0.0, 0.62096775, 0.19354838, 0.28225806, 0.0, 0.10483871, 0.12096774, 0.7016129, 0.27419356, 0.28225806, 0.5, 0.5080645, 0.0, 0.3467742, 0.6935484, 0.20967741, 0.0, 0.04032258, 0.16935484, 0.32258064, 0.61290324, 0.5241935, 0.16129032, 0.0, 0.032258064, 0.38709676, 0.12903225, 0.733871, 0.4032258, 0.7096774, 0.45967743, 0.0, 0.33870968, 0.33064517, 0.2580645, 0.28225806, 0.19354838, 0.0, 0.33870968, 0.048387095, 0.5080645, 0.0, 0.19354838, 0.41129032, 0.3548387, 0.09677419, 0.733871, 0.0, 0.29032257, 0.0, 0.5403226, 0.733871, 0.25, 0.62096775, 0.36290324, 0.10483871, 0.11290322, 0.2016129, 0.12096774, 0.23387097, 0.25, 0.0, 0.0, 0.41935483, 0.20967741, 0.29032257, 0.28225806, 0.33064517, 0.3548387, 0.07258064, 0.0, 0.15322581, 0.088709675, 0.36290324, 0.7580645, 0.6935484, 0.37096775, 0.032258064, 0.088709675, 0.33064517, 0.22580644, 0.21774194, 0.0, 0.088709675, 0.15322581, 0.12096774, 0.0, 0.41129032, 0.28225806, 0.0, 0.29032257, 0.2580645, 0.3467742, 0.4919355, 0.0, 0.5080645, 0.0, 0.27419356, 0.33064517, 0.7016129, 0.82258064, 0.22580644, 0.6532258, 0.20967741, 0.0, 0.0, 0.32258064, 0.33870968, 0.5322581, 0.16129032, 0.37096775, 0.0, 0.0, 0.13709678, 0.2580645, 0.3951613, 0.11290322, 0.61290324, 0.0, 0.16129032, 0.2983871, 0.25, 0.2580645, 0.6854839, 0.0, 0.36290324, 0.4032258, 0.516129, 0.0, 0.3548387, 0.08064516, 0.0, 0.20967741, 0.19354838, 0.46774194, 0.22580644, 0.2983871, 0.016129032, 0.83870965, 0.26612905, 0.0, 0.29032257, 0.20967741, 0.9919355, 0.0, 0.0, 0.27419356, 0.45967743, 0.26612905, 0.0, 0.33064517, 0.29032257, 0.0, 0.41129032, 0.42741936, 0.0, 0.28225806, 0.0, 0.66129035, 0.0, 0.7580645, 0.19354838, 0.33870968, 0.21774194, 0.45967743, 0.3951613, 0.5322581, 0.0, 0.33064517, 0.25, 0.0, 0.30645162, 0.016129032, 0.37903225, 0.0, 0.30645162, 0.16129032, 0.62903225, 0.0, 0.0, 0.5403226, 0.27419356, 0.5564516, 0.2580645, 0.16935484, 0.12903225, 0.05645161, 0.24193548, 0.29032257, 0.8145161, 0.0, 0.2983871, 0.7983871, 0.29032257, 0.5483871, 0.17741935, 0.0, 0.47580644, 0.5322581, 0.25, 0.4032258, 0.0, 0.3548387, 0.11290322, 0.43548387, 0.2016129, 0.41935483, 0.45967743, 0.0, 0.14516129, 0.0, 0.13709678, 0.23387097, 0.28225806, 0.5322581, 0.44354838, 0.15322581, 0.41129032, 0.66129035, 0.19354838, 0.024193548, 0.3548387, 0.13709678, 0.0, 0.4032258, 0.20967741, 0.0, 0.2016129, 0.4032258, 0.10483871, 0.024193548, 0.2016129, 0.58064514, 0.27419356, 0.0, 0.5322581, 0.33064517, 0.0, 0.0, 0.6532258, 0.37096775, 0.15322581, 0.0, 0.0, 0.3467742, 0.04032258, 0.0, 0.0, 0.13709678, 0.7258065, 0.31451613, 0.33064517, 0.37903225, 0.766129, 0.18548387, 0.0, 0.0, 0.0, 0.41935483, 0.30645162, 0.38709676, 0.19354838, 0.31451613, 0.18548387, 0.7016129, 0.6048387, 0.23387097, 0.62903225, 0.0, 0.25, 0.36290324, 0.37096775, 0.4516129, 0.46774194, 0.5, 0.29032257, 0.0, 0.17741935, 0.20967741, 0.4032258, 0.41935483, 0.4032258, 0.31451613, 0.23387097, 0.33870968, 0.24193548, 0.3951613, 0.0, 0.15322581, 0.0, 0.41129032, 0.14516129, 0.14516129, 0.17741935, 0.4516129, 0.048387095, 0.29032257, 0.17741935, 0.62096775, 0.22580644, 0.766129, 0.08064516, 0.19354838, 0.41129032, 0.24193548, 0.12903225, 0.0, 0.3467742, 0.0, 0.5241935, 0.32258064, 0.46774194, 0.2983871, 0.16129032, 0.0, 0.15322581, 0.0, 0.43548387, 0.31451613, 0.18548387, 0.14516129, 0.4516129, 0.05645161, 0.0, 0.41129032, 0.0, 0.43548387, 0.0, 0.11290322, 0.07258064, 0.0, 0.2016129, 0.0, 0.0, 0.62903225, 0.0, 0.048387095, 0.2016129, 0.7258065, 0.37903225, 0.11290322, 0.6935484, 0.22580644, 0.29032257, 0.0, 0.0, 0.20967741, 0.29032257, 0.10483871, 0.7741935, 0.0, 0.0, 0.32258064, 0.26612905, 0.31451613, 0.7096774, 0.032258064, 0.46774194, 0.0, 0.17741935, 0.4032258, 0.41935483, 0.0, 0.0, 0.14516129, 0.48387095, 0.032258064, 0.32258064, 0.32258064, 0.16935484, 0.66935486, 0.2983871, 0.4032258, 0.04032258, 0.37096775, 0.6532258, 0.0, 0.0, 0.29032257, 0.29032257, 0.7580645, 0.05645161, 0.0, 0.12096774, 0.0, 0.36290324, 0.66129035, 0.14516129, 0.0, 0.0, 0.0, 0.3467742, 0.0, 0.733871, 0.42741936, 0.17741935, 0.2983871, 0.21774194, 0.29032257 };
// const float speed_t_1[500] = { 0.21774194, 0.62903225, 0.22580644, 0.44354838, 0.26612905, 0.36290324, 0.0, 0.28225806, 0.37903225, 0.0, 0.09677419, 0.38709676, 0.0, 0.41129032, 0.3467742, 0.0, 0.16129032, 0.05645161, 0.0, 0.66129035, 0.21774194, 0.0, 0.31451613, 0.2983871, 0.38709676, 0.33870968, 0.33870968, 0.7016129, 0.29032257, 0.43548387, 0.05645161, 0.10483871, 0.0, 0.0, 0.016129032, 0.26612905, 0.0, 0.11290322, 0.7177419, 0.7419355, 0.43548387, 0.15322581, 0.28225806, 0.09677419, 0.18548387, 0.33870968, 0.20967741, 0.0, 0.7822581, 0.27419356, 0.13709678, 0.18548387, 0.61290324, 0.41935483, 0.27419356, 0.67741936, 0.16935484, 0.0, 0.12096774, 0.2983871, 0.3467742, 0.3548387, 0.44354838, 0.38709676, 0.0, 0.16129032, 0.7580645, 0.12903225, 0.38709676, 0.0, 0.25, 0.19354838, 0.20967741, 0.22580644, 0.0, 0.0, 0.19354838, 0.0, 0.14516129, 0.016129032, 0.0, 0.11290322, 0.0, 0.0, 0.25, 0.43548387, 0.17741935, 0.30645162, 0.0, 0.33870968, 0.4032258, 0.0, 0.088709675, 0.7580645, 0.22580644, 0.0, 0.36290324, 0.33870968, 0.33870968, 0.25, 0.0, 0.0, 0.62096775, 0.23387097, 0.2983871, 0.0, 0.088709675, 0.12096774, 0.7096774, 0.2580645, 0.29032257, 0.5, 0.5080645, 0.0, 0.33064517, 0.6935484, 0.20967741, 0.0, 0.07258064, 0.16935484, 0.33064517, 0.61290324, 0.5241935, 0.16935484, 0.0, 0.07258064, 0.33064517, 0.07258064, 0.7258065, 0.4032258, 0.7177419, 0.45967743, 0.0, 0.33870968, 0.32258064, 0.2580645, 0.25, 0.16129032, 0.0, 0.3548387, 0.048387095, 0.5, 0.0, 0.11290322, 0.37903225, 0.33870968, 0.11290322, 0.733871, 0.032258064, 0.27419356, 0.0, 0.5403226, 0.733871, 0.21774194, 0.62096775, 0.3467742, 0.10483871, 0.088709675, 0.22580644, 0.15322581, 0.23387097, 0.28225806, 0.0, 0.0, 0.41129032, 0.20967741, 0.29032257, 0.28225806, 0.32258064, 0.3467742, 0.09677419, 0.0, 0.15322581, 0.14516129, 0.37096775, 0.7580645, 0.6854839, 0.37096775, 0.0, 0.08064516, 0.33064517, 0.23387097, 0.21774194, 0.0, 0.088709675, 0.15322581, 0.14516129, 0.0, 0.41129032, 0.28225806, 0.0, 0.2983871, 0.23387097, 0.33064517, 0.5, 0.0, 0.48387095, 0.0, 0.27419356, 0.32258064, 0.6935484, 0.83064514, 0.23387097, 0.6532258, 0.20967741, 0.0, 0.0, 0.33064517, 0.33870968, 0.5322581, 0.20967741, 0.36290324, 0.0, 0.0, 0.18548387, 0.2580645, 0.38709676, 0.10483871, 0.61290324, 0.0, 0.18548387, 0.32258064, 0.26612905, 0.27419356, 0.6854839, 0.0, 0.33870968, 0.4032258, 0.516129, 0.0, 0.3548387, 0.12903225, 0.0, 0.21774194, 0.21774194, 0.47580644, 0.22580644, 0.2983871, 0.032258064, 0.83064514, 0.22580644, 0.0, 0.2983871, 0.20967741, 0.9919355, 0.0, 0.0, 0.28225806, 0.45967743, 0.28225806, 0.0, 0.3467742, 0.30645162, 0.0, 0.41129032, 0.42741936, 0.0, 0.28225806, 0.0, 0.6532258, 0.0, 0.7580645, 0.18548387, 0.33870968, 0.2580645, 0.45967743, 0.41129032, 0.5241935, 0.0, 0.32258064, 0.2580645, 0.0, 0.30645162, 0.024193548, 0.38709676, 0.0, 0.30645162, 0.16129032, 0.62903225, 0.0, 0.0, 0.5403226, 0.22580644, 0.5645161, 0.2580645, 0.11290322, 0.04032258, 0.09677419, 0.24193548, 0.28225806, 0.82258064, 0.0, 0.26612905, 0.7983871, 0.29032257, 0.5564516, 0.16935484, 0.0, 0.47580644, 0.5322581, 0.27419356, 0.41129032, 0.0, 0.3467742, 0.13709678, 0.43548387, 0.20967741, 0.42741936, 0.45967743, 0.0, 0.16129032, 0.0, 0.12903225, 0.23387097, 0.27419356, 0.5403226, 0.44354838, 0.15322581, 0.41935483, 0.66935486, 0.13709678, 0.0, 0.3548387, 0.16129032, 0.0, 0.4032258, 0.23387097, 0.0, 0.23387097, 0.41129032, 0.12903225, 0.024193548, 0.15322581, 0.57258064, 0.2983871, 0.0, 0.5403226, 0.33870968, 0.0, 0.0, 0.6532258, 0.37096775, 0.18548387, 0.0, 0.0, 0.33870968, 0.04032258, 0.0, 0.0, 0.13709678, 0.7258065, 0.33870968, 0.32258064, 0.37903225, 0.766129, 0.11290322, 0.0, 0.0, 0.0, 0.42741936, 0.30645162, 0.3951613, 0.21774194, 0.31451613, 0.20967741, 0.7016129, 0.6048387, 0.19354838, 0.61290324, 0.0, 0.27419356, 0.37903225, 0.37096775, 0.4516129, 0.46774194, 0.4919355, 0.29032257, 0.0, 0.2016129, 0.22580644, 0.36290324, 0.4032258, 0.4032258, 0.30645162, 0.23387097, 0.3467742, 0.16935484, 0.41129032, 0.0, 0.2580645, 0.0, 0.4032258, 0.14516129, 0.13709678, 0.17741935, 0.4516129, 0.048387095, 0.29032257, 0.18548387, 0.62096775, 0.17741935, 0.7741935, 0.088709675, 0.19354838, 0.41935483, 0.24193548, 0.088709675, 0.0, 0.33870968, 0.0, 0.5241935, 0.32258064, 0.46774194, 0.32258064, 0.16935484, 0.0, 0.15322581, 0.0, 0.43548387, 0.30645162, 0.21774194, 0.13709678, 0.46774194, 0.08064516, 0.0, 0.41129032, 0.0, 0.43548387, 0.0, 0.11290322, 0.07258064, 0.0, 0.23387097, 0.0, 0.0, 0.62903225, 0.0, 0.048387095, 0.2016129, 0.7258065, 0.38709676, 0.10483871, 0.7016129, 0.16935484, 0.27419356, 0.0, 0.0, 0.20967741, 0.29032257, 0.12903225, 0.7741935, 0.0, 0.0, 0.33064517, 0.26612905, 0.31451613, 0.7096774, 0.12096774, 0.47580644, 0.0, 0.12096774, 0.37903225, 0.41935483, 0.0, 0.0, 0.14516129, 0.48387095, 0.032258064, 0.28225806, 0.32258064, 0.17741935, 0.66129035, 0.31451613, 0.41129032, 0.08064516, 0.37096775, 0.6532258, 0.0, 0.032258064, 0.29032257, 0.16935484, 0.7580645, 0.05645161, 0.0, 0.15322581, 0.0, 0.38709676, 0.66129035, 0.14516129, 0.0, 0.0, 0.0, 0.37096775, 0.0, 0.733871, 0.43548387, 0.12096774, 0.30645162, 0.21774194, 0.2983871 };
// const float speed_t[500] = { 0.22580644, 0.62903225, 0.22580644, 0.4516129, 0.31451613, 0.37096775, 0.0, 0.27419356, 0.37903225, 0.0, 0.08064516, 0.38709676, 0.0, 0.41129032, 0.3467742, 0.0, 0.16129032, 0.024193548, 0.0, 0.66129035, 0.25, 0.0, 0.33870968, 0.26612905, 0.3951613, 0.33870968, 0.33870968, 0.7016129, 0.27419356, 0.43548387, 0.05645161, 0.05645161, 0.0, 0.0, 0.016129032, 0.27419356, 0.0, 0.11290322, 0.7177419, 0.7419355, 0.43548387, 0.2016129, 0.30645162, 0.09677419, 0.18548387, 0.31451613, 0.24193548, 0.0, 0.7903226, 0.2983871, 0.12903225, 0.11290322, 0.61290324, 0.3951613, 0.26612905, 0.67741936, 0.2016129, 0.0, 0.13709678, 0.2983871, 0.27419356, 0.3548387, 0.44354838, 0.38709676, 0.0, 0.12903225, 0.7580645, 0.13709678, 0.38709676, 0.0, 0.2580645, 0.19354838, 0.19354838, 0.22580644, 0.0, 0.0, 0.19354838, 0.0, 0.17741935, 0.0, 0.0, 0.12096774, 0.0, 0.0, 0.16129032, 0.43548387, 0.18548387, 0.30645162, 0.0, 0.33064517, 0.4032258, 0.0, 0.10483871, 0.7580645, 0.24193548, 0.0, 0.36290324, 0.33870968, 0.33870968, 0.29032257, 0.0, 0.0, 0.62903225, 0.23387097, 0.2983871, 0.0, 0.088709675, 0.11290322, 0.7096774, 0.2580645, 0.28225806, 0.4516129, 0.5, 0.0, 0.30645162, 0.7016129, 0.19354838, 0.0, 0.07258064, 0.14516129, 0.33064517, 0.61290324, 0.5322581, 0.17741935, 0.0, 0.07258064, 0.2983871, 0.07258064, 0.733871, 0.4032258, 0.7258065, 0.45967743, 0.0, 0.33870968, 0.31451613, 0.16935484, 0.23387097, 0.16129032, 0.0, 0.36290324, 0.09677419, 0.5, 0.0, 0.08064516, 0.37903225, 0.33064517, 0.11290322, 0.7258065, 0.05645161, 0.19354838, 0.0, 0.5483871, 0.733871, 0.17741935, 0.62096775, 0.33870968, 0.10483871, 0.10483871, 0.24193548, 0.14516129, 0.24193548, 0.30645162, 0.0, 0.0, 0.4032258, 0.22580644, 0.29032257, 0.27419356, 0.32258064, 0.3467742, 0.09677419, 0.0, 0.15322581, 0.14516129, 0.36290324, 0.7580645, 0.6854839, 0.37903225, 0.0, 0.08064516, 0.33064517, 0.22580644, 0.24193548, 0.0, 0.07258064, 0.15322581, 0.14516129, 0.0, 0.41129032, 0.30645162, 0.0, 0.30645162, 0.23387097, 0.31451613, 0.48387095, 0.0, 0.4516129, 0.0, 0.29032257, 0.31451613, 0.6935484, 0.83870965, 0.23387097, 0.6532258, 0.23387097, 0.0, 0.0, 0.3467742, 0.33870968, 0.5322581, 0.22580644, 0.37096775, 0.0, 0.0, 0.18548387, 0.29032257, 0.38709676, 0.10483871, 0.61290324, 0.0, 0.22580644, 0.33064517, 0.26612905, 0.28225806, 0.6854839, 0.0, 0.31451613, 0.4032258, 0.516129, 0.0, 0.3548387, 0.16129032, 0.0, 0.21774194, 0.24193548, 0.46774194, 0.22580644, 0.27419356, 0.024193548, 0.83064514, 0.16935484, 0.0, 0.2983871, 0.21774194, 0.9919355, 0.0, 0.0, 0.29032257, 0.46774194, 0.29032257, 0.0, 0.3467742, 0.31451613, 0.0, 0.41129032, 0.41935483, 0.0, 0.2983871, 0.0, 0.6532258, 0.0, 0.7580645, 0.18548387, 0.32258064, 0.2580645, 0.45967743, 0.41129032, 0.5241935, 0.0, 0.32258064, 0.27419356, 0.0, 0.30645162, 0.024193548, 0.3951613, 0.0, 0.30645162, 0.16129032, 0.62096775, 0.0, 0.0, 0.5403226, 0.16129032, 0.57258064, 0.26612905, 0.048387095, 0.024193548, 0.13709678, 0.24193548, 0.25, 0.83064514, 0.0, 0.23387097, 0.8064516, 0.27419356, 0.5564516, 0.16129032, 0.0, 0.47580644, 0.5241935, 0.28225806, 0.41129032, 0.0, 0.2983871, 0.13709678, 0.42741936, 0.2016129, 0.42741936, 0.44354838, 0.0, 0.16129032, 0.0, 0.12903225, 0.26612905, 0.27419356, 0.5403226, 0.4516129, 0.16129032, 0.41935483, 0.66129035, 0.14516129, 0.0, 0.3548387, 0.17741935, 0.0, 0.4032258, 0.23387097, 0.0, 0.25, 0.41935483, 0.12903225, 0.0, 0.10483871, 0.57258064, 0.30645162, 0.0, 0.5403226, 0.33870968, 0.0, 0.0, 0.6532258, 0.36290324, 0.18548387, 0.0, 0.0, 0.33870968, 0.016129032, 0.0, 0.0, 0.13709678, 0.7258065, 0.3548387, 0.31451613, 0.3467742, 0.7741935, 0.016129032, 0.0, 0.0, 0.0, 0.43548387, 0.30645162, 0.3951613, 0.24193548, 0.31451613, 0.25, 0.7016129, 0.6048387, 0.16129032, 0.5967742, 0.0, 0.29032257, 0.37903225, 0.36290324, 0.45967743, 0.45967743, 0.4919355, 0.29032257, 0.0, 0.23387097, 0.22580644, 0.36290324, 0.38709676, 0.4032258, 0.2983871, 0.22580644, 0.3467742, 0.16935484, 0.42741936, 0.0, 0.2580645, 0.0, 0.3951613, 0.11290322, 0.13709678, 0.17741935, 0.4516129, 0.016129032, 0.29032257, 0.19354838, 0.62903225, 0.12096774, 0.7741935, 0.09677419, 0.16129032, 0.42741936, 0.24193548, 0.06451613, 0.0, 0.33064517, 0.0, 0.5241935, 0.30645162, 0.45967743, 0.33870968, 0.16935484, 0.0, 0.16129032, 0.0, 0.42741936, 0.32258064, 0.24193548, 0.13709678, 0.48387095, 0.06451613, 0.0, 0.41129032, 0.0, 0.44354838, 0.0, 0.15322581, 0.15322581, 0.0, 0.26612905, 0.0, 0.0, 0.63709676, 0.0, 0.05645161, 0.14516129, 0.7258065, 0.38709676, 0.09677419, 0.7016129, 0.09677419, 0.27419356, 0.0, 0.0, 0.25, 0.30645162, 0.14516129, 0.7741935, 0.0, 0.0, 0.33064517, 0.26612905, 0.33064517, 0.7096774, 0.16129032, 0.47580644, 0.0, 0.088709675, 0.3548387, 0.43548387, 0.0, 0.0, 0.18548387, 0.48387095, 0.06451613, 0.22580644, 0.32258064, 0.2016129, 0.66935486, 0.33064517, 0.4032258, 0.13709678, 0.36290324, 0.6532258, 0.0, 0.06451613, 0.2983871, 0.16935484, 0.7580645, 0.05645161, 0.0, 0.17741935, 0.0, 0.4032258, 0.66129035, 0.21774194, 0.0, 0.0, 0.0, 0.37096775, 0.0, 0.733871, 0.43548387, 0.07258064, 0.32258064, 0.21774194, 0.2983871 };

// const float throttle_t_2[500] = { 0.22028854, 0.27312776, 0.2114141, 0.24668722, 0.2643238, 0.22028854, 0.15423568, 0.17175992, 0.22907488, 0.14974229, 0.18501543, 0.2246696, 0.15861674, 0.22905067, 0.17175992, 0.14098018, 0.2246696, 0.15861674, 0.1629978, 0.14977974, 0.2863414, 0.15423568, 0.24230617, 0.14536123, 0.19377753, 0.22905067, 0.18063436, 0.22907488, 0.15423568, 0.13656388, 0.15861674, 0.20265198, 0.15861674, 0.15861674, 0.1629978, 0.23792511, 0.14974229, 0.18939647, 0.24669604, 0.99118936, 0.34801763, 0.22028854, 0.2643238, 0.21590748, 0.22028854, 0.15423568, 0.23792511, 0.15861674, 0.20704845, 0.23343171, 0.1629978, 0.14536123, 0.15859032, 0.14974229, 0.1629978, 0.21145375, 0.2775793, 0.14098018, 0.15423568, 0.15859032, 0.15423568, 0.2643238, 0.23788546, 0.29510352, 0.15861674, 0.14974229, 0.14977974, 0.18063436, 0.1629978, 0.15861674, 0.19377753, 0.20265198, 0.14098018, 0.2246696, 0.14974229, 0.14974229, 0.20703304, 0.15423568, 0.1762533, 0.17175992, 0.15861674, 0.21590748, 0.1629978, 0.14536123, 0.15423568, 0.14537445, 0.2599119, 0.2510683, 0.15423568, 0.20265198, 0.23343171, 0.14536123, 0.19827093, 0.29515418, 0.23792511, 0.15423568, 0.25994274, 0.19377753, 0.14977974, 0.14536123, 0.15861674, 0.15423568, 0.99118936, 0.2246696, 0.19377753, 0.15861674, 0.14098018, 0.14098018, 0.3920705, 0.15861674, 0.28193834, 0.14974229, 0.3215859, 0.15861674, 0.15423568, 0.36563876, 0.14536123, 0.14974229, 0.18939647, 0.14974229, 0.19377753, 0.46255508, 0.14977974, 0.17621146, 0.15423568, 0.19377753, 0.14974229, 0.1629978, 0.36563876, 0.21585904, 0.18942732, 0.14977974, 0.15861674, 0.20703304, 0.17175992, 0.15423568, 0.14974229, 0.14098018, 0.14098018, 0.22905067, 0.14536123, 0.17175992, 0.15861674, 0.14536123, 0.15423568, 0.15423568, 0.14974229, 0.15418503, 0.19827093, 0.18939647, 0.14974229, 0.23788546, 0.3876652, 0.15423568, 0.16299559, 0.19827093, 0.15859032, 0.14536123, 0.2114141, 0.24668722, 0.14098018, 0.2643238, 0.15423568, 0.15861674, 0.19377753, 0.15423568, 0.1938326, 0.15423568, 0.18939647, 0.14974229, 0.20703304, 0.14536123, 0.14536123, 0.2246696, 0.15423568, 0.31277534, 0.3215859, 0.1762533, 0.14536123, 0.15423568, 0.22907488, 0.15861674, 0.22028854, 0.15861674, 0.14536123, 0.21590748, 0.19377753, 0.15861674, 0.14096917, 0.2246696, 0.14974229, 0.22028854, 0.14974229, 0.14536123, 0.24668722, 0.15861674, 0.15861674, 0.15423568, 0.22905067, 0.14537445, 0.31277534, 0.22026432, 0.19377753, 0.14977974, 0.22028854, 0.15861674, 0.15861674, 0.20703304, 0.22028854, 0.18061675, 0.24230617, 0.17621146, 0.14098018, 0.14536123, 0.23343171, 0.25556168, 0.17175992, 0.15861674, 0.30396473, 0.14974229, 0.19827093, 0.25556168, 0.22028854, 0.22905067, 0.14537445, 0.14536123, 0.15423568, 0.23343171, 0.46255508, 0.1629978, 0.22905067, 0.24668722, 0.14974229, 0.16737886, 0.24668722, 0.18502203, 0.26431718, 0.17175992, 0.15423568, 0.16299559, 0.14974229, 0.15861674, 0.20703304, 0.21590748, 0.15418503, 0.15861674, 0.14974229, 0.2643238, 0.15859032, 0.20265198, 0.14536123, 0.19377753, 0.34801763, 0.14536123, 0.17175992, 0.15423568, 0.15861674, 0.16737886, 0.14974229, 0.20704845, 0.15861674, 0.2907489, 0.18063436, 0.15423568, 0.21590748, 0.2246696, 0.14536123, 0.15423568, 0.14098018, 0.15423568, 0.15423568, 0.15861674, 0.19823788, 0.14974229, 0.20265198, 0.14098018, 0.18939647, 0.2246696, 0.15859032, 0.14974229, 0.15861674, 0.14096917, 0.14974229, 0.27312776, 0.23343171, 0.15423568, 0.14536123, 0.20703304, 0.14977974, 0.25556168, 0.3215859, 0.15423568, 0.15423568, 0.2599119, 0.18939647, 0.26431718, 0.21585904, 0.14974229, 0.2246696, 0.14096917, 0.30835903, 0.19377753, 0.15423568, 0.24668722, 0.1762533, 0.16737886, 0.18501543, 0.17175992, 0.1629978, 0.14974229, 0.16737886, 0.14098018, 0.14536123, 0.33037665, 0.14536123, 0.18942732, 0.18939647, 0.21590748, 0.1762533, 0.31277534, 0.14974229, 0.16737886, 0.14974229, 0.2246696, 0.14974229, 0.15859032, 0.23343171, 0.15861674, 0.23343171, 0.21585904, 0.22905067, 0.15861674, 0.14098018, 0.14977974, 0.23792511, 0.15861674, 0.33920705, 0.2114141, 0.15861674, 0.15861674, 0.27753305, 0.1629978, 0.22905067, 0.14974229, 0.15861674, 0.1629978, 0.15861674, 0.15861674, 0.16740088, 0.17175992, 0.4140969, 0.18063436, 0.15423568, 0.2246696, 0.28193834, 0.14098018, 0.15418503, 0.14098018, 0.14974229, 0.17175992, 0.14537445, 0.18942732, 0.22905067, 0.26431718, 0.24668722, 0.2863436, 0.26872247, 0.14974229, 0.16299559, 0.14974229, 0.25556168, 0.22028854, 0.1762533, 0.19823788, 0.23343171, 0.14974229, 0.20703304, 0.15423568, 0.23343171, 0.18501543, 0.14974229, 0.1629978, 0.15423568, 0.14536123, 0.14974229, 0.2114141, 0.14974229, 0.24668722, 0.14536123, 0.36563876, 0.15423568, 0.15418503, 0.14098018, 0.14536123, 0.14537445, 0.33039647, 0.14536123, 0.15859032, 0.1762533, 0.16299559, 0.14974229, 0.4889868, 0.18939647, 0.14974229, 0.22028854, 0.2246696, 0.15423568, 0.14974229, 0.14974229, 0.15861674, 0.19823788, 0.18063436, 0.16299559, 0.2246696, 0.18501543, 0.15423568, 0.26872247, 0.15861674, 0.14537445, 0.15423568, 0.29510352, 0.14098018, 0.23343171, 0.20265198, 0.14536123, 0.1938326, 0.14974229, 0.2775793, 0.15423568, 0.2510683, 0.26870486, 0.14974229, 0.18501543, 0.15423568, 0.14536123, 0.40528634, 0.14098018, 0.14536123, 0.16737886, 0.2246696, 0.14974229, 0.14536123, 0.6431718, 0.14974229, 0.14974229, 0.15861674, 0.15861674, 0.24230617, 0.24668722, 0.2510683, 0.16299559, 0.15418503, 0.14974229, 0.22905067, 0.21590748, 0.20265198, 0.24229077, 0.23343171, 0.9955947, 0.15861674, 0.14974229, 0.15861674, 0.29510352, 0.14974229, 0.15423568, 0.2246696, 0.15418503, 0.19377753, 0.15861674, 0.15423568, 0.18063436, 0.99118936, 0.21590748, 0.20265198, 0.21590748, 0.19827093, 0.25110132, 0.14974229, 0.19827093, 0.27312776, 0.15861674, 0.15859032, 0.15423568, 0.14974229, 0.2114141, 0.15861674, 0.28196037, 0.14977974, 0.18501543, 0.15861674, 0.17175992, 0.15423568, 0.24230617, 0.15861674, 0.44052863, 0.15423568, 0.15423568, 0.23792511, 0.24230617, 0.24668722 };
// const float throttle_t_1[500] = { 0.2114141, 0.27312776, 0.2114141, 0.23792511, 0.24668722, 0.2246696, 0.14536123, 0.17175992, 0.22907488, 0.14974229, 0.1629978, 0.2114141, 0.15861674, 0.23792511, 0.19377753, 0.14098018, 0.19827093, 0.15423568, 0.1629978, 0.14977974, 0.25994274, 0.15861674, 0.24230617, 0.14098018, 0.19827093, 0.19827093, 0.18063436, 0.22907488, 0.15423568, 0.13656388, 0.15861674, 0.1629978, 0.15861674, 0.14536123, 0.1629978, 0.22905067, 0.14974229, 0.15423568, 0.24669604, 0.9955947, 0.33920705, 0.2114141, 0.29510352, 0.21590748, 0.22028854, 0.15423568, 0.24230617, 0.14536123, 0.20704845, 0.23792511, 0.15423568, 0.14536123, 0.16299559, 0.14974229, 0.14974229, 0.21145375, 0.2775793, 0.14098018, 0.14974229, 0.15418503, 0.15861674, 0.23343171, 0.23788546, 0.29510352, 0.1629978, 0.15423568, 0.14977974, 0.18939647, 0.1629978, 0.15861674, 0.19377753, 0.20265198, 0.15861674, 0.20703304, 0.14974229, 0.14974229, 0.18501543, 0.15861674, 0.2246696, 0.15861674, 0.15861674, 0.18939647, 0.15861674, 0.14974229, 0.14974229, 0.14537445, 0.26431718, 0.23792511, 0.15423568, 0.14974229, 0.2246696, 0.14974229, 0.18939647, 0.29515418, 0.23343171, 0.15423568, 0.25994274, 0.19377753, 0.14977974, 0.2246696, 0.15861674, 0.15423568, 0.8986784, 0.2730859, 0.14974229, 0.15861674, 0.14536123, 0.14098018, 0.3920705, 0.15861674, 0.2599119, 0.14974229, 0.29955947, 0.15861674, 0.15423568, 0.36563876, 0.14536123, 0.14974229, 0.18501543, 0.14974229, 0.20265198, 0.46255508, 0.14977974, 0.15418503, 0.15423568, 0.21590748, 0.15861674, 0.1629978, 0.37885463, 0.22026432, 0.18502203, 0.14977974, 0.15861674, 0.17175992, 0.14974229, 0.15423568, 0.14536123, 0.14536123, 0.14098018, 0.20265198, 0.18939647, 0.18063436, 0.15861674, 0.14536123, 0.15423568, 0.15861674, 0.14974229, 0.15859032, 0.19377753, 0.14974229, 0.15861674, 0.25110132, 0.3920705, 0.14536123, 0.16299559, 0.21590748, 0.15859032, 0.18063436, 0.19377753, 0.2114141, 0.17175992, 0.24668722, 0.15861674, 0.15861674, 0.1762533, 0.14536123, 0.20704845, 0.15423568, 0.21590748, 0.18939647, 0.22905067, 0.14536123, 0.14536123, 0.2246696, 0.14974229, 0.31277534, 0.3215859, 0.1762533, 0.15861674, 0.16737886, 0.22907488, 0.17175992, 0.2510683, 0.15861674, 0.15423568, 0.22905067, 0.1629978, 0.14974229, 0.14537445, 0.2246696, 0.14974229, 0.23343171, 0.14974229, 0.14974229, 0.1629978, 0.15861674, 0.15423568, 0.15423568, 0.22905067, 0.14537445, 0.30396473, 0.20704845, 0.21590748, 0.14977974, 0.22028854, 0.15861674, 0.15861674, 0.19827093, 0.22028854, 0.18061675, 0.2246696, 0.18502203, 0.14536123, 0.14536123, 0.1762533, 0.25556168, 0.1629978, 0.18501543, 0.30396473, 0.15861674, 0.21590748, 0.2510683, 0.21590748, 0.22905067, 0.14537445, 0.14536123, 0.15423568, 0.23343171, 0.33920705, 0.15861674, 0.2114141, 0.23343171, 0.14974229, 0.24668722, 0.23343171, 0.17621146, 0.27312776, 0.17175992, 0.1762533, 0.17621146, 0.14974229, 0.15861674, 0.20703304, 0.21590748, 0.15418503, 0.15861674, 0.15423568, 0.25994274, 0.15859032, 0.20265198, 0.14536123, 0.19377753, 0.37004405, 0.14536123, 0.14974229, 0.15423568, 0.15861674, 0.16737886, 0.14974229, 0.21145375, 0.15861674, 0.2907489, 0.19377753, 0.15423568, 0.21590748, 0.2246696, 0.14536123, 0.15423568, 0.14098018, 0.14536123, 0.20265198, 0.15861674, 0.19823788, 0.14974229, 0.15423568, 0.14098018, 0.14974229, 0.22907488, 0.15859032, 0.15423568, 0.15861674, 0.14096917, 0.14974229, 0.28193834, 0.17175992, 0.14974229, 0.1629978, 0.23343171, 0.14537445, 0.1629978, 0.29515418, 0.15423568, 0.14974229, 0.2599119, 0.14974229, 0.27312776, 0.18061675, 0.14974229, 0.23348017, 0.14096917, 0.2510683, 0.18063436, 0.15423568, 0.18063436, 0.1762533, 0.18063436, 0.18501543, 0.16737886, 0.17175992, 0.14974229, 0.14536123, 0.14098018, 0.14536123, 0.33037665, 0.14536123, 0.18502203, 0.1629978, 0.2246696, 0.18939647, 0.30837005, 0.14536123, 0.1629978, 0.14974229, 0.16737886, 0.14974229, 0.15859032, 0.23343171, 0.1629978, 0.24230617, 0.21585904, 0.22905067, 0.15861674, 0.14098018, 0.15418503, 0.2114141, 0.15861674, 0.33920705, 0.2114141, 0.15861674, 0.15861674, 0.26431718, 0.1629978, 0.22905067, 0.14974229, 0.1629978, 0.1629978, 0.1629978, 0.15423568, 0.16740088, 0.15423568, 0.40969163, 0.18939647, 0.1629978, 0.15861674, 0.27753305, 0.14974229, 0.15418503, 0.14098018, 0.14974229, 0.19827093, 0.14537445, 0.16299559, 0.22028854, 0.2246696, 0.2510683, 0.2863436, 0.26431718, 0.15423568, 0.16299559, 0.15423568, 0.24668722, 0.22028854, 0.1762533, 0.1938326, 0.23343171, 0.20265198, 0.20703304, 0.1629978, 0.22028854, 0.18501543, 0.14974229, 0.15861674, 0.15423568, 0.14536123, 0.14974229, 0.20703304, 0.14974229, 0.2510683, 0.15423568, 0.36563876, 0.14974229, 0.15418503, 0.14098018, 0.19377753, 0.14537445, 0.33480176, 0.14974229, 0.15859032, 0.1762533, 0.16299559, 0.14536123, 0.48458153, 0.23343171, 0.14974229, 0.22028854, 0.23343171, 0.15423568, 0.15423568, 0.17175992, 0.15861674, 0.18942732, 0.18063436, 0.16299559, 0.2246696, 0.18063436, 0.15423568, 0.26872247, 0.15861674, 0.14537445, 0.22028854, 0.2730859, 0.14098018, 0.22028854, 0.14974229, 0.14536123, 0.18942732, 0.14974229, 0.2995969, 0.15423568, 0.2510683, 0.26870486, 0.14536123, 0.21590748, 0.15423568, 0.14536123, 0.40528634, 0.14536123, 0.14536123, 0.14974229, 0.25110132, 0.14974229, 0.15423568, 0.3876652, 0.14974229, 0.14974229, 0.1629978, 0.15861674, 0.2510683, 0.24668722, 0.24668722, 0.16299559, 0.15418503, 0.14974229, 0.22905067, 0.21590748, 0.19827093, 0.24229077, 0.23792511, 0.99118936, 0.15861674, 0.14098018, 0.15861674, 0.25556168, 0.14536123, 0.14974229, 0.24668722, 0.15418503, 0.19377753, 0.15423568, 0.15423568, 0.19377753, 0.99118936, 0.24668722, 0.19827093, 0.24230617, 0.15423568, 0.24669604, 0.14974229, 0.22905067, 0.2599119, 0.15861674, 0.15859032, 0.15423568, 0.14974229, 0.20703304, 0.15861674, 0.31723347, 0.14977974, 0.23792511, 0.1629978, 0.14974229, 0.15861674, 0.24230617, 0.15861674, 0.44052863, 0.15423568, 0.15423568, 0.23792511, 0.24230617, 0.22028854 };
// const float throttle_t[500] = { 0.100231215, 0.17064591, 0.07011058, 0.11535562, 0.12035436, 0.11535562, 0.029864287, 0.05498618, 0.120382, 0.029864287, 0.04498869, 0.13547876, 0.03998995, 0.13048002, 0.060113095, 0.029864287, 0.085234985, 0.034991205, 0.04498869, 0.034933407, 0.04498869, 0.03998995, 0.13048002, 0.0198668, 0.06511184, 0.1253531, 0.029864287, 0.120382, 0.034991205, 0.014827852, 0.100231215, 0.034991205, 0.03998995, 0.024865543, 0.034991205, 0.100231215, 0.029864287, 0.034991205, 0.14048757, 0.9949736, 0.23598893, 0.100231215, 0.16559939, 0.100231215, 0.04498869, 0.034991205, 0.13547876, 0.029864287, 0.10027646, 0.12035436, 0.029864287, 0.075109325, 0.039959792, 0.029864287, 0.049987435, 0.10027646, 0.17059813, 0.0198668, 0.100231215, 0.07011813, 0.034991205, 0.1253531, 0.13043477, 0.1807238, 0.04498869, 0.029864287, 0.029907009, 0.085234985, 0.09523247, 0.03998995, 0.09523247, 0.09523247, 0.034991205, 0.09523247, 0.029864287, 0.029864287, 0.07011058, 0.03998995, 0.110356875, 0.029864287, 0.029864287, 0.029864287, 0.03998995, 0.024865543, 0.034991205, 0.024880623, 0.1605931, 0.13048002, 0.029864287, 0.029864287, 0.07011058, 0.024865543, 0.09523247, 0.21588339, 0.1253531, 0.03998995, 0.1253531, 0.03998995, 0.029907009, 0.11535562, 0.024865543, 0.024865543, 0.8089972, 0.1807238, 0.029864287, 0.029864287, 0.04498869, 0.0198668, 0.3063584, 0.03998995, 0.14048757, 0.03998995, 0.210857, 0.03998995, 0.034991205, 0.2611209, 0.0198668, 0.029864287, 0.07011058, 0.049987435, 0.09023373, 0.38678062, 0.029907009, 0.034933407, 0.03998995, 0.10535813, 0.03998995, 0.03998995, 0.28625283, 0.11032923, 0.014827852, 0.029907009, 0.03998995, 0.05498618, 0.029864287, 0.029864287, 0.07011058, 0.024865543, 0.0198668, 0.10535813, 0.034991205, 0.029864287, 0.03998995, 0.034991205, 0.034991205, 0.03998995, 0.029864287, 0.034933407, 0.08010807, 0.029864287, 0.03998995, 0.13546118, 0.31138477, 0.024865543, 0.044986177, 0.100231215, 0.039959792, 0.049987435, 0.08010807, 0.060113095, 0.05498618, 0.1556019, 0.03998995, 0.03998995, 0.060113095, 0.024865543, 0.085197285, 0.13547876, 0.110356875, 0.075109325, 0.12035436, 0.024865543, 0.024865543, 0.085234985, 0.029864287, 0.21588339, 0.22593616, 0.029864287, 0.034991205, 0.09523247, 0.11535562, 0.05498618, 0.1556019, 0.03998995, 0.10535813, 0.12035436, 0.029864287, 0.029864287, 0.024880623, 0.11535562, 0.029864287, 0.1253531, 0.034991205, 0.029864287, 0.04498869, 0.03998995, 0.034991205, 0.034991205, 0.09523247, 0.024880623, 0.2058306, 0.085197285, 0.05498618, 0.029907009, 0.13048002, 0.024865543, 0.03998995, 0.09523247, 0.05498618, 0.060065344, 0.11535562, 0.085197285, 0.024865543, 0.024865543, 0.060113095, 0.1253531, 0.04498869, 0.110356875, 0.20080422, 0.03998995, 0.085234985, 0.1556019, 0.10535813, 0.1253531, 0.024880623, 0.03998995, 0.029864287, 0.034991205, 0.23096254, 0.03998995, 0.09523247, 0.12035436, 0.07011058, 0.09523247, 0.1253531, 0.065091744, 0.18069868, 0.034991205, 0.060113095, 0.060065344, 0.029864287, 0.03998995, 0.034991205, 0.029864287, 0.034933407, 0.03998995, 0.034991205, 0.1556019, 0.024880623, 0.060113095, 0.034991205, 0.08010807, 0.2711737, 0.029864287, 0.029864287, 0.034991205, 0.03998995, 0.14547625, 0.029864287, 0.10530285, 0.024865543, 0.15556672, 0.08010807, 0.034991205, 0.07011058, 0.11032923, 0.0198668, 0.034991205, 0.0198668, 0.024865543, 0.09523247, 0.03998995, 0.085197285, 0.029864287, 0.034991205, 0.0198668, 0.075109325, 0.120382, 0.039959792, 0.03998995, 0.029864287, 0.019854238, 0.029864287, 0.18069868, 0.11535562, 0.034991205, 0.04498869, 0.07011058, 0.024880623, 0.029864287, 0.19577783, 0.034991205, 0.029864287, 0.15054034, 0.060113095, 0.17064591, 0.039959792, 0.029864287, 0.12540838, 0.019854238, 0.16060065, 0.05498618, 0.034991205, 0.04498869, 0.09523247, 0.029864287, 0.07011058, 0.05498618, 0.029864287, 0.029864287, 0.024865543, 0.0198668, 0.0198668, 0.14047751, 0.024865543, 0.07011813, 0.024865543, 0.1253531, 0.07011058, 0.18572506, 0.13048002, 0.03998995, 0.029864287, 0.11535562, 0.029864287, 0.039959792, 0.09023373, 0.04498869, 0.13547876, 0.095250055, 0.12035436, 0.029864287, 0.024865543, 0.029907009, 0.075109325, 0.03998995, 0.24604173, 0.034991205, 0.03998995, 0.03998995, 0.16561949, 0.029864287, 0.060113095, 0.029864287, 0.03998995, 0.029864287, 0.034991205, 0.03998995, 0.050012562, 0.13048002, 0.32646394, 0.075109325, 0.04498869, 0.03998995, 0.16561949, 0.029864287, 0.034933407, 0.0198668, 0.034991205, 0.029864287, 0.024880623, 0.024880623, 0.10535813, 0.120382, 0.14547625, 0.18069868, 0.1605931, 0.029864287, 0.044986177, 0.03998995, 0.13048002, 0.10535813, 0.034991205, 0.085197285, 0.13547876, 0.075109325, 0.09023373, 0.024865543, 0.110356875, 0.09023373, 0.03998995, 0.03998995, 0.034991205, 0.024865543, 0.110356875, 0.09523247, 0.049987435, 0.14547625, 0.034991205, 0.15054034, 0.029864287, 0.029907009, 0.024865543, 0.06511184, 0.024880623, 0.25106812, 0.029864287, 0.034933407, 0.1253531, 0.044986177, 0.024865543, 0.41191256, 0.085234985, 0.13048002, 0.085234985, 0.12035436, 0.029864287, 0.034991205, 0.05498618, 0.03998995, 0.07011813, 0.029864287, 0.044986177, 0.09523247, 0.034991205, 0.03998995, 0.17064591, 0.03998995, 0.024880623, 0.110356875, 0.17059813, 0.0198668, 0.11535562, 0.0198668, 0.029864287, 0.075144514, 0.029864287, 0.20084694, 0.034991205, 0.19572003, 0.20584568, 0.024865543, 0.09523247, 0.034991205, 0.024865543, 0.32143754, 0.024865543, 0.07011058, 0.029864287, 0.1605931, 0.029864287, 0.034991205, 0.31138477, 0.04498869, 0.029864287, 0.04498869, 0.03998995, 0.17572506, 0.1807238, 0.13547876, 0.044986177, 0.034933407, 0.029864287, 0.12035436, 0.110356875, 0.04498869, 0.13043477, 0.15060316, 0.9899472, 0.029864287, 0.024865543, 0.03998995, 0.14047751, 0.024865543, 0.024865543, 0.13048002, 0.034933407, 0.07011058, 0.034991205, 0.034991205, 0.100231215, 0.9899472, 0.13048002, 0.08010807, 0.1556019, 0.034991205, 0.13546118, 0.034991205, 0.15060316, 0.15054034, 0.029864287, 0.039959792, 0.034991205, 0.029864287, 0.10535813, 0.034991205, 0.19572003, 0.029907009, 0.1253531, 0.09523247, 0.029864287, 0.03998995, 0.13547876, 0.03998995, 0.36164865, 0.029864287, 0.049987435, 0.13547876, 0.13547876, 0.060113095 };

// const float timing_advance_t_2[500] = { 0.8039216, 0.8039216, 0.8039216, 0.8088235, 0.8186275, 0.8039216, 0.64215684, 0.85294116, 0.85294116, 0.64215684, 0.8088235, 0.85294116, 0.63235295, 0.8480392, 0.8382353, 0.70098037, 0.8333333, 0.8333333, 0.63235295, 0.7941176, 0.8480392, 0.60294116, 0.8039216, 0.6127451, 0.7745098, 0.8382353, 0.8186275, 0.84313726, 0.5245098, 0.6862745, 0.7794118, 0.8480392, 0.67156863, 0.65686274, 0.7745098, 0.8088235, 0.6862745, 0.8235294, 0.8382353, 0.75980395, 0.7892157, 0.8480392, 0.8186275, 0.8186275, 0.8333333, 0.5441176, 0.8039216, 0.6617647, 0.872549, 0.8039216, 0.64215684, 0.65686274, 0.627451, 0.5539216, 0.90686274, 0.8480392, 0.8186275, 0.6617647, 0.67156863, 0.5245098, 0.5735294, 0.7794118, 0.79901963, 0.8039216, 0.627451, 0.5833333, 0.6666667, 0.8480392, 0.88235295, 0.63235295, 0.8088235, 0.8186275, 0.64705884, 0.8088235, 0.63235295, 0.6617647, 0.7941176, 0.5735294, 0.8627451, 0.60294116, 0.63235295, 0.8333333, 0.63235295, 0.64705884, 0.50980395, 0.70098037, 0.8382353, 0.8186275, 0.67156863, 0.5980392, 0.8333333, 0.6764706, 0.71568626, 0.7941176, 0.8186275, 0.6127451, 0.7941176, 0.7941176, 0.7205882, 0.89705884, 0.6617647, 0.6617647, 0.75490195, 0.8235294, 0.8088235, 0.61764705, 0.6764706, 0.6862745, 0.7794118, 0.9362745, 0.70098037, 0.5882353, 0.7745098, 0.65686274, 0.5833333, 0.7794118, 0.65686274, 0.6617647, 0.7892157, 0.6617647, 0.8186275, 0.75490195, 0.627451, 0.9362745, 0.61764705, 0.8088235, 0.5441176, 0.6127451, 0.7647059, 0.7892157, 0.85784316, 0.8137255, 0.64705884, 0.5735294, 0.5392157, 0.5294118, 0.6862745, 0.70098037, 0.65686274, 0.8088235, 0.70098037, 0.86764705, 0.627451, 0.7058824, 0.5441176, 0.5147059, 0.70098037, 0.627451, 0.7892157, 0.5980392, 0.627451, 0.7892157, 0.7794118, 0.627451, 0.627451, 0.5735294, 0.5833333, 0.65686274, 0.8333333, 0.8235294, 0.64705884, 0.8186275, 0.6764706, 0.64215684, 0.7794118, 0.63235295, 0.8186275, 0.6911765, 0.85294116, 0.65686274, 0.8186275, 0.6617647, 0.71568626, 0.8333333, 0.61764705, 0.8039216, 0.7892157, 0.67156863, 0.7892157, 0.74509805, 0.8039216, 0.60294116, 0.8039216, 0.64705884, 0.64705884, 0.8039216, 0.8186275, 0.627451, 0.627451, 0.8088235, 0.7058824, 0.8039216, 0.5980392, 0.75980395, 0.8235294, 0.6127451, 0.5294118, 0.6617647, 0.8186275, 0.57843137, 0.7794118, 0.8382353, 0.8235294, 0.8235294, 0.8088235, 0.65686274, 0.63235295, 0.7647059, 0.8088235, 0.8088235, 0.8333333, 0.9117647, 0.6862745, 0.65686274, 0.8235294, 0.7745098, 0.8480392, 0.70098037, 0.7941176, 0.67156863, 0.8333333, 0.8235294, 0.7892157, 0.7941176, 0.89215684, 0.6764706, 0.5147059, 0.8235294, 0.7647059, 0.67156863, 0.8088235, 0.8039216, 0.64705884, 0.60294116, 0.8333333, 0.877451, 0.7647059, 0.6911765, 0.60294116, 0.95098037, 0.6617647, 0.65686274, 0.5882353, 0.7205882, 0.65686274, 0.627451, 0.6617647, 0.74509805, 0.9411765, 0.8088235, 0.8088235, 0.8186275, 0.78431374, 0.6127451, 0.85294116, 0.5147059, 0.63235295, 0.88235295, 0.6764706, 0.85784316, 0.6617647, 0.7941176, 0.7058824, 0.5294118, 0.8333333, 0.9019608, 0.627451, 0.50980395, 0.6911765, 0.627451, 0.61764705, 0.6764706, 0.70098037, 0.61764705, 0.6127451, 0.6764706, 0.8186275, 0.8382353, 0.627451, 0.6764706, 0.63235295, 0.65686274, 0.6911765, 0.8382353, 0.6617647, 0.63235295, 0.6862745, 0.8235294, 0.92156863, 0.8088235, 0.7892157, 0.64215684, 0.5441176, 0.84313726, 0.61764705, 0.8333333, 0.64705884, 0.63235295, 0.8235294, 0.75490195, 0.7892157, 0.8235294, 0.6617647, 0.627451, 0.8627451, 0.5980392, 0.8235294, 0.8382353, 0.5539216, 0.63235295, 0.6127451, 0.6764706, 0.64705884, 0.8186275, 0.7205882, 0.63235295, 0.5294118, 0.8382353, 0.85294116, 0.7892157, 0.50980395, 0.65686274, 0.60294116, 0.8382353, 0.65686274, 0.5441176, 0.8480392, 0.67156863, 0.8333333, 0.85784316, 0.7892157, 0.5539216, 0.65686274, 0.627451, 0.8333333, 0.6617647, 0.7892157, 0.73039216, 0.6617647, 0.63235295, 0.7941176, 0.5980392, 0.8186275, 0.6617647, 0.64705884, 0.60294116, 0.75980395, 0.74509805, 0.627451, 0.64215684, 0.7794118, 0.8235294, 0.5441176, 0.8627451, 0.8235294, 0.73039216, 0.5980392, 0.67156863, 0.627451, 0.8382353, 0.50490195, 0.8627451, 0.8186275, 0.84313726, 0.8186275, 0.8137255, 0.7941176, 0.64215684, 0.627451, 0.6764706, 0.7941176, 0.8088235, 0.85294116, 0.8627451, 0.8088235, 0.50980395, 0.60294116, 0.6911765, 0.8039216, 0.8480392, 0.5245098, 0.65686274, 0.5539216, 0.7205882, 0.5245098, 0.8039216, 0.89215684, 0.8333333, 0.5833333, 0.65686274, 0.5882353, 0.627451, 0.7058824, 0.64705884, 0.627451, 0.7647059, 0.7058824, 0.46568626, 0.65686274, 0.627451, 0.70098037, 0.7745098, 0.7941176, 0.5833333, 0.8039216, 0.75, 0.6617647, 0.67156863, 0.6911765, 0.6617647, 0.84313726, 0.5882353, 0.627451, 0.7745098, 0.8627451, 0.6127451, 0.8333333, 0.67156863, 0.627451, 0.6127451, 0.8186275, 0.7058824, 0.7892157, 0.6764706, 0.6764706, 0.8235294, 0.6764706, 0.7647059, 0.6617647, 0.8333333, 0.8088235, 0.5980392, 0.8480392, 0.6617647, 0.627451, 0.7794118, 0.6911765, 0.5980392, 0.8333333, 0.8382353, 0.5245098, 0.9264706, 0.7647059, 0.5, 0.5147059, 0.5833333, 0.627451, 0.8382353, 0.8186275, 0.8235294, 0.95098037, 0.5735294, 0.65686274, 0.8235294, 0.7892157, 0.7794118, 0.82843137, 0.8235294, 0.7794118, 0.627451, 0.50980395, 0.5735294, 0.8235294, 0.6862745, 0.6617647, 0.7892157, 0.627451, 0.8088235, 0.5588235, 0.50980395, 0.8333333, 0.76960784, 0.8333333, 0.8088235, 0.8039216, 0.8039216, 0.8333333, 0.6617647, 0.8039216, 0.8088235, 0.5147059, 0.627451, 0.6617647, 0.64705884, 0.8186275, 0.64215684, 0.8186275, 0.627451, 0.8235294, 0.627451, 0.64215684, 0.5686275, 0.8088235, 0.65686274, 0.76960784, 0.89215684, 0.63235295, 0.7647059, 0.8088235, 0.8039216 };
// const float timing_advance_t_1[500] = { 0.8039216, 0.8088235, 0.8088235, 0.8088235, 0.8186275, 0.8039216, 0.64215684, 0.85294116, 0.85294116, 0.65686274, 0.63235295, 0.92156863, 0.627451, 0.8088235, 0.8039216, 0.6764706, 0.8480392, 0.6617647, 0.63235295, 0.627451, 0.8382353, 0.64705884, 0.8039216, 0.64215684, 0.7794118, 0.85294116, 0.5686275, 0.8382353, 0.5147059, 0.65686274, 0.7794118, 0.5686275, 0.6764706, 0.60294116, 0.5882353, 0.8186275, 0.6764706, 0.5294118, 0.8382353, 0.75, 0.7941176, 0.8235294, 0.74509805, 0.8333333, 0.8333333, 0.5441176, 0.8039216, 0.6127451, 0.85784316, 0.8088235, 0.64705884, 0.65686274, 0.627451, 0.5539216, 0.75, 0.8333333, 0.8333333, 0.65686274, 0.7205882, 0.5, 0.5686275, 0.8088235, 0.79901963, 0.8039216, 0.627451, 0.6617647, 0.6666667, 0.8627451, 0.8088235, 0.60294116, 0.8235294, 0.8186275, 0.7892157, 0.8088235, 0.67156863, 0.6862745, 0.8382353, 0.60294116, 0.8235294, 0.60294116, 0.63235295, 0.8382353, 0.627451, 0.6617647, 0.50980395, 0.6372549, 0.8382353, 0.7941176, 0.6617647, 0.5980392, 0.8235294, 0.67156863, 0.8627451, 0.79901963, 0.8235294, 0.6617647, 0.7941176, 0.7941176, 0.71568626, 0.8039216, 0.6617647, 0.6617647, 0.75490195, 0.8186275, 0.627451, 0.63235295, 0.70098037, 0.6862745, 0.7794118, 0.9362745, 0.79901963, 0.5294118, 0.78431374, 0.627451, 0.5441176, 0.7794118, 0.65686274, 0.6617647, 0.8235294, 0.6617647, 0.8039216, 0.75490195, 0.627451, 0.98039216, 0.64215684, 0.8235294, 0.5539216, 0.6127451, 0.7745098, 0.78431374, 0.9117647, 0.8088235, 0.64705884, 0.8382353, 0.5588235, 0.5294118, 0.6764706, 0.7058824, 0.65686274, 0.8186275, 0.64215684, 0.60294116, 0.627451, 0.8627451, 0.5588235, 0.5245098, 0.70098037, 0.627451, 0.8186275, 0.5882353, 0.65686274, 0.7794118, 0.78431374, 0.6764706, 0.627451, 0.7941176, 0.57843137, 0.85294116, 0.8382353, 0.60294116, 0.71568626, 0.8333333, 0.6617647, 0.65686274, 0.7352941, 0.63235295, 0.79901963, 0.6911765, 0.8480392, 0.8186275, 0.8235294, 0.6617647, 0.71568626, 0.8333333, 0.5392157, 0.79901963, 0.7892157, 0.67156863, 0.60294116, 0.7941176, 0.8039216, 0.70098037, 0.8039216, 0.6617647, 0.61764705, 0.8088235, 0.64215684, 0.627451, 0.627451, 0.8088235, 0.65686274, 0.7745098, 0.5980392, 0.7205882, 0.5980392, 0.6127451, 0.5147059, 0.6617647, 0.8186275, 0.627451, 0.75980395, 0.85784316, 0.8235294, 0.8333333, 0.8088235, 0.5980392, 0.63235295, 0.8480392, 0.8039216, 0.8627451, 0.8088235, 0.9117647, 0.7892157, 0.6862745, 0.64705884, 0.7745098, 0.8627451, 0.61764705, 0.7941176, 0.5392157, 0.8186275, 0.8333333, 0.7892157, 0.7941176, 0.89705884, 0.6764706, 0.50980395, 0.8235294, 0.7745098, 0.61764705, 0.8088235, 0.8186275, 0.64215684, 0.8480392, 0.8186275, 0.89215684, 0.7794118, 0.6911765, 0.5833333, 0.92156863, 0.65686274, 0.65686274, 0.5882353, 0.7205882, 0.6519608, 0.63235295, 0.60294116, 0.74509805, 0.9264706, 0.8088235, 0.627451, 0.8186275, 0.7647059, 0.6127451, 0.5882353, 0.5147059, 0.63235295, 0.88235295, 0.6764706, 0.85784316, 0.60294116, 0.8039216, 0.8480392, 0.5294118, 0.8333333, 0.9019608, 0.627451, 0.5147059, 0.70098037, 0.5147059, 0.7745098, 0.6764706, 0.70098037, 0.6862745, 0.63235295, 0.70098037, 0.5980392, 0.8382353, 0.627451, 0.5980392, 0.63235295, 0.63235295, 0.63235295, 0.8186275, 0.8333333, 0.6764706, 0.63235295, 0.8333333, 0.95098037, 0.5980392, 0.7941176, 0.65686274, 0.5245098, 0.84313726, 0.5833333, 0.8333333, 0.46078432, 0.627451, 0.8186275, 0.92156863, 0.8039216, 0.86764705, 0.6617647, 0.6764706, 0.8627451, 0.5882353, 0.8186275, 0.8480392, 0.5686275, 0.64215684, 0.90686274, 0.6764706, 0.64705884, 0.8186275, 0.71568626, 0.8627451, 0.5294118, 0.8039216, 0.8333333, 0.7892157, 0.8627451, 0.6617647, 0.60294116, 0.63235295, 0.65686274, 0.5441176, 0.8480392, 0.7058824, 0.8186275, 0.85294116, 0.7892157, 0.5539216, 0.67156863, 0.627451, 0.8333333, 0.6617647, 0.7892157, 0.73039216, 0.67156863, 0.627451, 0.7941176, 0.5147059, 0.8186275, 0.67156863, 0.74509805, 0.60294116, 0.75980395, 0.6617647, 0.627451, 0.6617647, 0.7794118, 0.8235294, 0.88235295, 0.627451, 0.8137255, 0.85294116, 0.5882353, 0.6862745, 0.64705884, 0.74509805, 0.51960784, 0.75, 0.8186275, 0.64705884, 0.8186275, 0.8333333, 0.8039216, 0.64215684, 0.627451, 0.5980392, 0.7941176, 0.8088235, 0.85294116, 0.8480392, 0.8088235, 0.8039216, 0.60294116, 0.64215684, 0.8088235, 0.8480392, 0.5686275, 0.65686274, 0.5735294, 0.73039216, 0.5245098, 0.8186275, 0.85294116, 0.8088235, 0.5441176, 0.65686274, 0.64705884, 0.627451, 0.7205882, 0.8382353, 0.5833333, 0.75980395, 0.6862745, 0.46568626, 0.8627451, 0.627451, 0.6764706, 0.7745098, 0.8186275, 0.5833333, 0.8186275, 0.7647059, 0.71568626, 0.61764705, 0.85294116, 0.6617647, 0.86764705, 0.5882353, 0.627451, 0.7941176, 0.64215684, 0.64215684, 0.8333333, 0.6617647, 0.627451, 0.8333333, 0.8186275, 0.8186275, 0.7794118, 0.627451, 0.6764706, 0.79901963, 0.6617647, 0.7794118, 0.6617647, 0.8333333, 0.8088235, 0.65686274, 0.8235294, 0.64705884, 0.6911765, 0.7794118, 0.6764706, 0.6911765, 0.627451, 0.8333333, 0.5245098, 0.9264706, 0.76960784, 0.64215684, 0.5245098, 0.6127451, 0.627451, 0.8039216, 0.8186275, 0.8382353, 0.9460784, 0.5735294, 0.65686274, 0.8235294, 0.7941176, 0.8235294, 0.84313726, 0.8186275, 0.7794118, 0.627451, 0.60294116, 0.5735294, 0.8088235, 0.6764706, 0.60294116, 0.7892157, 0.627451, 0.8088235, 0.7058824, 0.5147059, 0.8088235, 0.76960784, 0.8235294, 0.8186275, 0.8333333, 0.5686275, 0.8382353, 0.6764706, 0.8039216, 0.8235294, 0.5147059, 0.627451, 0.6911765, 0.64705884, 0.8186275, 0.64215684, 0.8333333, 0.627451, 0.7892157, 0.65686274, 0.65686274, 0.627451, 0.8088235, 0.6764706, 0.7647059, 0.89215684, 0.6764706, 0.7745098, 0.8088235, 0.8186275 };
// const float timing_advance_t[500] = { 0.8186275, 0.8137255, 0.8235294, 0.8088235, 0.8235294, 0.8088235, 0.7058824, 0.85294116, 0.85294116, 0.7205882, 0.8088235, 0.8382353, 0.627451, 0.8088235, 0.63235295, 0.5980392, 0.8480392, 0.6617647, 0.64215684, 0.627451, 0.6617647, 0.65686274, 0.8039216, 0.64215684, 0.8235294, 0.8235294, 0.5980392, 0.85294116, 0.5147059, 0.627451, 0.8235294, 0.64705884, 0.6764706, 0.60294116, 0.5882353, 0.8235294, 0.63235295, 0.5294118, 0.8480392, 0.75, 0.8039216, 0.8235294, 0.8186275, 0.8333333, 0.6127451, 0.5441176, 0.8039216, 0.6764706, 0.872549, 0.8088235, 0.67156863, 0.6764706, 0.627451, 0.5147059, 0.89215684, 0.84313726, 0.8333333, 0.65686274, 0.8627451, 0.5833333, 0.5294118, 0.8088235, 0.79901963, 0.8088235, 0.627451, 0.6862745, 0.65686274, 0.85294116, 0.8088235, 0.60294116, 0.8039216, 0.8186275, 0.6617647, 0.8088235, 0.67156863, 0.6862745, 0.8382353, 0.60294116, 0.8039216, 0.6911765, 0.63235295, 0.627451, 0.63235295, 0.6862745, 0.5147059, 0.622549, 0.8235294, 0.7941176, 0.61764705, 0.5245098, 0.86764705, 0.6862745, 0.8480392, 0.8039216, 0.8235294, 0.75980395, 0.8088235, 0.60294116, 0.6911765, 0.8088235, 0.6617647, 0.6911765, 0.75490195, 0.7941176, 0.5392157, 0.627451, 0.86764705, 0.7058824, 0.7794118, 0.61764705, 0.74019605, 0.5980392, 0.78431374, 0.627451, 0.5441176, 0.7794118, 0.7058824, 0.6617647, 0.8235294, 0.88235295, 0.8039216, 0.75490195, 0.627451, 0.7941176, 0.64215684, 0.8235294, 0.5294118, 0.6764706, 0.7647059, 0.78431374, 0.8186275, 0.86764705, 0.65686274, 0.8382353, 0.5588235, 0.5147059, 0.85294116, 0.7058824, 0.6911765, 0.8088235, 0.64705884, 0.8039216, 0.627451, 0.6764706, 0.5588235, 0.5245098, 0.7205882, 0.627451, 0.8186275, 0.50980395, 0.75980395, 0.76960784, 0.78431374, 0.71568626, 0.627451, 0.8039216, 0.5735294, 0.627451, 0.6127451, 0.85294116, 0.71568626, 0.8088235, 0.6617647, 0.65686274, 0.63235295, 0.63235295, 0.79901963, 0.8382353, 0.8480392, 0.8186275, 0.8235294, 0.67156863, 0.71568626, 0.8333333, 0.5294118, 0.8039216, 0.7892157, 0.5245098, 0.60294116, 0.7794118, 0.8137255, 0.70098037, 0.8039216, 0.6617647, 0.8333333, 0.8088235, 0.7205882, 0.627451, 0.627451, 0.7794118, 0.65686274, 0.60294116, 0.627451, 0.67156863, 0.5980392, 0.627451, 0.5147059, 0.64705884, 0.7892157, 0.627451, 0.79901963, 0.872549, 0.5980392, 0.84313726, 0.8088235, 0.5980392, 0.63235295, 0.7745098, 0.6127451, 0.8480392, 0.8039216, 0.89215684, 0.7892157, 0.6862745, 0.64705884, 0.7794118, 0.8627451, 0.8333333, 0.78431374, 0.5392157, 0.8235294, 0.8039216, 0.7941176, 0.7941176, 0.88235295, 0.64215684, 0.50980395, 0.63235295, 0.7794118, 0.61764705, 0.7647059, 0.8382353, 0.7647059, 0.7745098, 0.8186275, 0.89705884, 0.8137255, 0.70098037, 0.64215684, 0.9264706, 0.627451, 0.64705884, 0.63235295, 0.61764705, 0.6519608, 0.63235295, 0.60294116, 0.74509805, 0.7352941, 0.60294116, 0.627451, 0.8088235, 0.76960784, 0.67156863, 0.5245098, 0.5147059, 0.627451, 0.8186275, 0.6617647, 0.8627451, 0.6764706, 0.6911765, 0.8382353, 0.5147059, 0.8627451, 0.90686274, 0.61764705, 0.5147059, 0.70098037, 0.5147059, 0.7892157, 0.67156863, 0.70098037, 0.6617647, 0.5588235, 0.6862745, 0.86764705, 0.8186275, 0.627451, 0.65686274, 0.5882353, 0.64705884, 0.63235295, 0.8186275, 0.7941176, 0.7058824, 0.5735294, 0.61764705, 0.9558824, 0.5392157, 0.7941176, 0.6617647, 0.50980395, 0.8333333, 0.9264706, 0.8382353, 0.46078432, 0.64215684, 0.8235294, 0.89215684, 0.8186275, 0.627451, 0.67156863, 0.65686274, 0.8186275, 0.5686275, 0.8186275, 0.8382353, 0.627451, 0.64215684, 0.90686274, 0.67156863, 0.71568626, 0.8382353, 0.71568626, 0.8627451, 0.64705884, 0.8333333, 0.8333333, 0.67156863, 0.8333333, 0.65686274, 0.5441176, 0.8235294, 0.65686274, 0.5441176, 0.8088235, 0.7058824, 0.8186275, 0.5637255, 0.8235294, 0.627451, 0.8627451, 0.627451, 0.8382353, 0.65686274, 0.7892157, 0.6127451, 0.67156863, 0.63235295, 0.79901963, 0.5147059, 0.627451, 0.64215684, 0.65686274, 0.5539216, 0.60294116, 0.6617647, 0.627451, 0.8382353, 0.7794118, 0.8235294, 0.8627451, 0.627451, 0.8137255, 0.85294116, 0.5833333, 0.6862745, 0.627451, 0.64215684, 0.5245098, 0.9607843, 0.8088235, 0.85294116, 0.8186275, 0.8186275, 0.8186275, 0.6764706, 0.627451, 0.6617647, 0.7941176, 0.8088235, 0.89705884, 0.86764705, 0.8039216, 0.8186275, 0.8480392, 0.6764706, 0.8088235, 0.8235294, 0.5686275, 0.6127451, 0.5735294, 0.7058824, 0.7892157, 0.8186275, 0.85294116, 0.8039216, 0.5441176, 0.71568626, 0.6764706, 0.627451, 0.6862745, 0.88235295, 0.5588235, 0.7647059, 0.6127451, 0.48039216, 0.8333333, 0.627451, 0.74509805, 0.7745098, 0.73039216, 0.86764705, 0.5833333, 0.7647059, 0.6911765, 0.6862745, 0.8382353, 0.65686274, 0.8480392, 0.5147059, 0.627451, 0.8088235, 0.6764706, 0.64215684, 0.8186275, 0.6617647, 0.627451, 0.8333333, 0.8186275, 0.8186275, 0.7892157, 0.67156863, 0.67156863, 0.8039216, 0.6617647, 0.7794118, 0.65686274, 0.8382353, 0.8039216, 0.65686274, 0.8235294, 0.6617647, 0.6862745, 0.7794118, 0.65686274, 0.86764705, 0.7058824, 0.8333333, 0.5245098, 0.88235295, 0.76960784, 0.7941176, 0.5245098, 0.6127451, 0.63235295, 0.8333333, 0.8333333, 0.8382353, 0.95098037, 0.57843137, 0.6617647, 0.8235294, 0.7941176, 0.60294116, 0.82843137, 0.8333333, 0.7794118, 0.6911765, 0.6617647, 0.5686275, 0.8088235, 0.6764706, 0.6862745, 0.8333333, 0.627451, 0.8382353, 0.7058824, 0.5147059, 0.8186275, 0.76960784, 0.8088235, 0.8186275, 0.8088235, 0.627451, 0.8235294, 0.64705884, 0.8088235, 0.84313726, 0.6764706, 0.627451, 0.6911765, 0.63235295, 0.6862745, 0.65686274, 0.8382353, 0.627451, 0.7745098, 0.8039216, 0.6617647, 0.627451, 0.8088235, 0.6617647, 0.7647059, 0.7745098, 0.63235295, 0.7647059, 0.8088235, 0.5588235 };

time_t timestamp;
long int time_session;
int prediction;
extern long int time_server;
extern bool time_server_obtained;
bool send_data = false;
int samples_sent = 0;
bool time_obtained = false;

const tflite::Model* model = tflite::GetModel(encoder_model_tflite);
tflite::MicroInterpreter* interpreter;
TfLiteTensor* input;
TfLiteTensor* output;

// Buffer de memória
// constexpr int tensor_arena_size = 8 * 1024;
// byte tensor_arena[tensor_arena_size];
byte tensor_arena[encoder_model_tflite_len];
double encoder_output[3];

// interpreter configuration
static tflite::MicroErrorReporter micro_error_reporter;
static tflite::AllOpsResolver resolver;
static tflite::MicroInterpreter static_interpreter(
      model, resolver, tensor_arena, encoder_model_tflite_len, &micro_error_reporter);

void verifyAndResetFile(const char* filename) {
  if (SD.exists(filename)) {
    Serial.println(String(filename) + " exists. Creating a new file.");
    SD.remove(filename); // Remove o arquivo existente
  }

  File file = SD.open(filename, FILE_WRITE); // Cria um novo arquivo vazio
  if (!file) {
    Serial.println("Failed to create file: " + String(filename));
  } else {
    Serial.println("New file created: " + String(filename));
    file.close();
  }
}

void intializeTensorFlow(){

  interpreter = &static_interpreter;
  interpreter->AllocateTensors();

  // print the input information
  input = interpreter->input(0);
  output = interpreter->output(0);

  // Serial.println("Input tensor info:");
  // Serial.print("Type: ");
  // Serial.println(input->type);
  // Serial.print("Dims: ");
  // Serial.println(input->dims->size);
  // Serial.print("Size: ");
  // Serial.println(input->bytes);
  // Serial.print("Name: ");
  // Serial.println(input->name);

}

void obtainTimeTelelogger()
{
    sntp_setoperatingmode(SNTP_OPMODE_POLL);
    // sntp_setservername(0, (char*)"pool.ntp.org");
    sntp_setservername(0, (char*)"a.st1.ntp.br");
    sntp_init();

    time_obtained = true;
}

void verifyIfFileExists(String filename){
    if (!SD.exists(filename)) {
        Serial.println(filename + " does not exist");
        // Cria um novo arquivo com valor inicial (0 ou outro valor padrão)
        File file = SD.open(filename, FILE_WRITE);
        if (!file) {
            Serial.println("Failed to create file for writing");
            return;
        }
        file.println(0); // Escreve o valor inicial
        file.close();
    }
}

// Vector X Used in the classification -> [SIZE = Number of features]
float X[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
// Vector to store the values in t-2 = ['EngineLoad', 'RPM', 'Speed', 'Throttle', 'TimingAdvance']
float values_t2[5] = {0.0, 0.0, 0.0, 0.0, 0.0};
// Vector to store the values in t-1 = ['EngineLoad', 'RPM', 'Speed', 'Throttle', 'TimingAdvance']
float values_t1[5] = {0.0, 0.0, 0.0, 0.0, 0.0};
// Vector to store the values in t = ['EngineLoad', 'RPM', 'Speed', 'Throttle', 'TimingAdvance']
float values_t[5] = {0.0, 0.0, 0.0, 0.0, 0.0};

//  ⁠Mínimo: [  0.          0.          1.          0.          0.        186.     0.          0.          0.          0.         11.         10.1960783     -64.        -64.        -64. ]
//  ⁠Intervalo: [  97.64705658   97.64705658   96.64705658 4180.         4091.      3945.          124.          124.          124.           89.01960754     78.01960754   78.82352924  102.          102.          101.5]
// Means and Standard Deviation values for the features
float min_values_t2[5] = {0.0, 0.0, 0.0, 10.59, -14.5};
float min_values_t1[5] = {0.0, 0.0, 0.0, 11.76, -14.5};
float min_values_t[5] = {12.16, 645.5, 0.0, 11.76, -14.5};


CBufferManager bufman;
Task subtask;

#if ENABLE_MEMS
float accBias[3] = {0}; // calibrated reference accelerometer data
float accSum[3] = {0};
float acc[3] = {0};
float gyr[3] = {0};
float mag[3] = {0};
uint8_t accCount = 0;
#endif
int deviceTemp = 0;

// config data
char apn[32];
#if ENABLE_WIFI
char wifiSSID[32] = WIFI_SSID;
char wifiPassword[32] = WIFI_PASSWORD;
#endif
nvs_handle_t nvs;

// live data
String netop;
String ip;
int16_t rssi = 0;
int16_t rssiLast = 0;
char vin[18] = {0};
uint16_t dtc[6] = {0};
float batteryVoltage = 0;
GPS_DATA* gd = 0;

char devid[12] = {0};
char isoTime[32] = {0};

// stats data
uint32_t lastMotionTime = 0;
uint32_t timeoutsOBD = 0;
uint32_t timeoutsNet = 0;
uint32_t lastStatsTime = 0;

int32_t syncInterval = SERVER_SYNC_INTERVAL * 1000;
int32_t dataInterval = 1000;

#if STORAGE != STORAGE_NONE
int fileid = 0;
uint16_t lastSizeKB = 0;
#endif

byte ledMode = 0;

bool serverSetup(IPAddress& ip);
void serverProcess(int timeout);
void processMEMS(CBuffer* buffer);
bool processGPS(CBuffer* buffer);
void processBLE(int timeout);

class State {
public:
  bool check(uint16_t flags) { return (m_state & flags) == flags; }
  void set(uint16_t flags) { m_state |= flags; }
  void clear(uint16_t flags) { m_state &= ~flags; }
  uint16_t m_state = 0;
};

FreematicsESP32 sys;

class OBD : public COBD
{
protected:
  void idleTasks()
  {
    // do some quick tasks while waiting for OBD response
#if ENABLE_MEMS
    processMEMS(0);
#endif
    processBLE(0);
  }
};

OBD obd;

MEMS_I2C* mems = 0;

#if STORAGE == STORAGE_SPIFFS
SPIFFSLogger logger;
#elif STORAGE == STORAGE_SD
SDLogger logger;
#endif

#if SERVER_PROTOCOL == PROTOCOL_UDP
TeleClientUDP teleClient;
#else
TeleClientHTTP teleClient;
#endif

#if ENABLE_OLED
OLED_SH1106 oled;
#endif

State state;

void printTimeoutStats()
{
  Serial.print("Timeouts: OBD:");
  Serial.print(timeoutsOBD);
  Serial.print(" Network:");
  Serial.println(timeoutsNet);
}

void beep(int duration)
{
    // turn on buzzer at 2000Hz frequency 
    sys.buzzer(2000);
    delay(duration);
    // turn off buzzer
    sys.buzzer(0);
}

#if LOG_EXT_SENSORS
void processExtInputs(CBuffer* buffer)
{
#if LOG_EXT_SENSORS == 1
  uint8_t levels[2] = {(uint8_t)digitalRead(PIN_SENSOR1), (uint8_t)digitalRead(PIN_SENSOR2)};
  buffer->add(PID_EXT_SENSORS, ELEMENT_UINT8, levels, sizeof(levels), 2);
#elif LOG_EXT_SENSORS == 2
  uint16_t reading[] = {adc1_get_raw(ADC1_CHANNEL_0), adc1_get_raw(ADC1_CHANNEL_1)};
  Serial.print("GPIO0:");
  Serial.print((float)reading[0] * 3.15 / 4095 - 0.01);
  Serial.print(" GPIO1:");
  Serial.println((float)reading[1] * 3.15 / 4095 - 0.01);
  buffer->add(PID_EXT_SENSORS, ELEMENT_UINT16, reading, sizeof(reading), 2);
#endif
}
#endif

/*******************************************************************************
  HTTP API
*******************************************************************************/
#if ENABLE_HTTPD
int handlerLiveData(UrlHandlerParam* param)
{
    char *buf = param->pucBuffer;
    int bufsize = param->bufSize;
    int n = snprintf(buf, bufsize, "{\"obd\":{\"vin\":\"%s\",\"battery\":%.1f,\"pid\":[", vin, batteryVoltage);
    uint32_t t = millis();
    for (int i = 0; i < sizeof(obdData) / sizeof(obdData[0]); i++) {
        n += snprintf(buf + n, bufsize - n, "{\"pid\":%u,\"value\":%d,\"age\":%u},",
            0x100 | obdData[i].pid, obdData[i].value, (unsigned int)(t - obdData[i].ts));
    }
    n--;
    n += snprintf(buf + n, bufsize - n, "]}");
#if ENABLE_MEMS
    if (accCount) {
      n += snprintf(buf + n, bufsize - n, ",\"mems\":{\"acc\":[%d,%d,%d],\"stationary\":%u}",
          (int)((accSum[0] / accCount - accBias[0]) * 100), (int)((accSum[1] / accCount - accBias[1]) * 100), (int)((accSum[2] / accCount - accBias[2]) * 100),
          (unsigned int)(millis() - lastMotionTime));
    }
#endif
    if (gd && gd->ts) {
      n += snprintf(buf + n, bufsize - n, ",\"gps\":{\"utc\":\"%s\",\"lat\":%f,\"lng\":%f,\"alt\":%f,\"speed\":%f,\"sat\":%d,\"age\":%u}",
          isoTime, gd->lat, gd->lng, gd->alt, gd->speed, (int)gd->sat, (unsigned int)(millis() - gd->ts));
    }
    buf[n++] = '}';
    param->contentLength = n;
    param->contentType=HTTPFILETYPE_JSON;
    return FLAG_DATA_RAW;
}
#endif

/*******************************************************************************
  Reading and processing OBD data
*******************************************************************************/
#if ENABLE_OBD

int readFlag = 0; 
uint8_t time_sd_flag;

void processOBD(CBuffer* buffer)
{

  static int idx[2] = {0, 0};
  int tier = 1;

  input = interpreter->input(0);
  output = interpreter->output(0);

  // while(time_session < 100000){
    
  //   // 1. Read the time from the RTC
  //   struct timeval tv;
  //   gettimeofday(&tv, NULL);
  //   timestamp = tv.tv_sec;
  //   time_session = timestamp;
  //   Serial.println("TIME SESSION");
  //   Serial.println(time_session);
  //   delay(1000);
  // }

  if (!time_server_obtained){
    time_session = 0;
    Serial.println("TIME SERVER NOT OBTAINED");
  } else {
    Serial.println("TIME SERVER OBTAINED");
    Serial.println(time_server);
    time_session = time_server;
  }

  if (count_date == 0 && time_server_obtained){
    // syncronize the timestamp with the server
    struct timeval tv;
    gettimeofday(&tv, NULL);
    tv.tv_sec = time_server;
    timestamp = tv.tv_sec;
  }

  // Serial.println("TIME STAMP");
  // Serial.println(timestamp);
  // file.print(timestamp);
  // file.close();

  if (!time_compared && time_server_obtained){

    // Verify if the file time.txt exists
    verifyIfFileExists("/time.txt");

    // Verify if the file time_session.txt exists
    verifyIfFileExists("/time_session.txt");

    // 2. Compare the time with the last time the data was sent. This time is stored in the "time.txt" file
    File file = SD.open("/time.txt", FILE_READ);
    if (!file) {
      Serial.println("Failed to open file for reading");
      return;
    }

    String lastTimeStr = file.readStringUntil('\n');
    file.close();

    // Serial.println("LAST TIME STRING");
    // Serial.println(lastTimeStr);

    // transform the string into a time_t
    time_t last_time = lastTimeStr.toInt();
    // Serial.println("LAST TIME");
    // Serial.println(last_time);

    // get the absolute difference between time_session and lastTime
    int diff = timestamp - last_time;
    Serial.println("DIFFERENCE");
    Serial.println(diff);

    // 3. If the difference is greater than 120 seconds, a new session has started
    if (diff > 120){
      // print the time_session
      Serial.println("A NEW SESSION HAS STARTED");
      
      time_session = timestamp;
      Serial.println(time_session);
      // update the time_session in the file
      File file = SD.open("/time_session.txt", FILE_WRITE);
      if (!file) {
        Serial.println("Failed to open file for writing");
        return;
      }

      // 5. In the first case, update the time_session in the file
      file.print(time_session);
      file.close();
    } else {
      // 4. If the difference is less than 120 seconds, the last session has not finished yet.
      Serial.println("THE LAST SESSION HAS NOT FINISHED YET");
      
      File file = SD.open("/time_session.txt", FILE_READ);
      if (!file) {
        Serial.println("Failed to open file for reading");
        return;
      }

      String lastTimeStr = file.readStringUntil('\n');
      file.close();

      // 6. In the second case, read the time_session from the file
      time_session = lastTimeStr.toInt();
    }

    time_compared = true;
  }

  // 7. Write the time_stamp in the file to register the last time the data was sent
  File file = SD.open("/time.txt", FILE_WRITE);
  if (!file) {
    Serial.println("Failed to open file for writing");
    return;
  }

  struct timeval tv;
  gettimeofday(&tv, NULL);
  timestamp = tv.tv_sec;
  // Serial.println("TIME STAMP");
  // Serial.println(timestamp);
  file.print(timestamp);
  file.close();

  made_prediction = false;

  // -------------------------------------------------------------------------------------

  buffer->add(time_session_flag, ELEMENT_INT32, &time_session, sizeof(time_session));

  for (byte i = 0; i < sizeof(obdData) / sizeof(obdData[0]); i++) {
    if (obdData[i].tier > tier) {
        // reset previous tier index
        idx[tier - 2] = 0;
        // keep new tier number
        tier = obdData[i].tier;
        // move up current tier index
        i += idx[tier - 2]++;
        // check if into next tier
        if (obdData[i].tier != tier) {
            idx[tier - 2]= 0;
            i--;
            continue;
        }
    }
    byte pid = obdData[i].pid;
    if (!obd.isValidPID(pid)){
      // print the PID that is not valid
      Serial.print("PID ");
      Serial.print(pid, HEX);
      Serial.println(" is not valid");
      continue;
    }

    int value;
    bool success = false;
    if (obd.readPID(pid, value)) {
        obdData[i].ts = millis();
        obdData[i].value = value;

        // start
        // gettimeofday(&total_start, NULL);

        if (pid == PID_TIMING_ADVANCE) {
          count_model++;
          count_auto_encoder++;
          values_t[4] = value;
          buffer->add((uint16_t)pid | 0x100, ELEMENT_INT32, &value, sizeof(value));
        } else if (pid == PID_RPM) {
          count_model++;
          count_auto_encoder++;
          values_t[1] = value;
          buffer->add((uint16_t)pid | 0x100, ELEMENT_INT32, &value, sizeof(value));
        } else if (pid == PID_SPEED) {
          count_model++;
          count_auto_encoder++;
          values_t[2] = value;
          buffer->add((uint16_t)pid | 0x100, ELEMENT_INT32, &value, sizeof(value));
        } else if (pid == PID_THROTTLE) {
          count_model++;
          count_auto_encoder++;
          values_t[3] = value;
          buffer->add((uint16_t)pid | 0x100, ELEMENT_INT32, &value, sizeof(value));
        } else if (pid == PID_ENGINE_LOAD) {
          count_model++;
          count_auto_encoder++;
          values_t[0] = value;
          buffer->add((uint16_t)pid | 0x100, ELEMENT_INT32, &value, sizeof(value));
        } else {
          // buffer->add((uint16_t)pid | 0x100, ELEMENT_INT32, &value, sizeof(value));
        }

        // Serial.print("SHIFT MADE!");

        if(!made_prediction){
            // First read - (t-2) -> read = 0
            if (readFlag == 0 && i < 5) {
              values_t2[i] = (value - means_values_t2[i]) / std_dev_values_t2[i];
              //Serial.print("\n[Read_0] = " + String(readFlag));
              if (i == 4) {
                readFlag++;
              }
            }
            // Second read - (t-1) -> read = 1
            else if (readFlag == 1 && i < 5) {
              values_t1[i] = (value - means_values_t1[i]) / std_dev_values_t1[i];
              //Serial.print("\n[Read_1] = "+ String(readFlag));
              if (i == 4) {
                readFlag++;
              }
            }
            // Third read - (t) -> read = 2
            else if (readFlag >= 2 && i < 5) {
              values_t[i] = (value - means_values_t[i]) / std_dev_values_t[i];
              //Serial.print("\n[Read_2] = "+ String(readFlag));
            }
            // int result;
            //Serial.print("\n[PROCESSED (" + String(i) + ")] VALUES: " + String(value));
            success = true;

            if (i == 4 && success && readFlag==2 && !made_prediction && count_model > 6) {
              // displays the values in X array to the serial monitor
              //for (int i = 0; i < 6; i++) {
              //  Serial.print("\n [PROCESSED] VALUES: " + String(X[i]));
              //}
              
              // Copy the values from the values_t2, values_t1 and values_t to the X array
              int index = 0;
              for (int i = 0; i < 5; ++i) {
                X[index++] = values_t2[i];
                X[index++] = values_t1[i];
                X[index++] = values_t[i];
              }

              for(int j = 0; j < 15; j++){
                // Serial.print("Inputando valores no modelo: " + String(i));

                input->data.f[j] = X[j];
                // Serial.print(" ");
                // Serial.print(input->data.f[i]);
              }

              // Serial.println("Invocando o modelo");

              unsigned long start_time = micros();  // tempo antes da predição

              TfLiteStatus invoke_status = interpreter->Invoke();

              unsigned long end_time = micros();    // tempo depois da predição
              unsigned long inference_time = end_time - start_time; // tempo em microssegundos

              if (invoke_status != kTfLiteOk) {
                Serial.println("Invoke failed!");
                return;
              } else {
                made_prediction = true;
                Serial.println("Invoke success!");
              }

              // get the output values
              // Serial.print("[DEBUG] TFLITE PREDICTION: " + String(output->data.f[0])); 
              for (int j = 0; j < 3; j++) {
                encoder_output[j] = output->data.f[j];
                Serial.print(" ");
                Serial.print(encoder_output[j]);
              }
              Serial.println();

              float eg = encoder_output[0];
              float rpm = encoder_output[1];
              float speed = encoder_output[2];

              // writing the values in the file
              File dataFile = SD.open("/data_autoencoder_c4.txt", FILE_APPEND);
              if (!dataFile) {
                Serial.println("Failed to open file for appending");
              } else {
                dataFile.print(String(eg, 10) + "," + 
                              String(rpm, 10) + "," + 
                              String(speed, 10) + "," + 
                              String(inference_time) + "\n");  // writes time as fourth column
                dataFile.close();
                Serial.println("Data written to /data_autoencoder_c4.txt");
              }

              // add latent space values
              buffer->add(0x104, ELEMENT_FLOAT, &eg, sizeof(eg));
              buffer->add(0x10C, ELEMENT_FLOAT, &rpm, sizeof(rpm));
              buffer->add(0x10D, ELEMENT_FLOAT, &speed, sizeof(speed));
              
              // Now values in t-2 should be updated with the values in t-1
              // and values in t-1 should be updated with the values in t
              for (int i = 0; i < 5; i++) {
                values_t2[i] = values_t1[i];
                values_t1[i] = values_t[i];
              }
            }
        }

        
    } else {
        timeoutsOBD++;
        printTimeoutStats();
        break;
    }

    if (tier > 1) break;

    if (time_obtained){
      samples_sent++;
    }
    
  }

  

  int kph = obdData[0].value;
  if (kph >= 2) lastMotionTime = millis();
}
#endif

bool initGPS()
{
  // start GNSS receiver
  if (sys.gpsBeginExt()) {
    Serial.println("GNSS:OK(E)");
  } else if (sys.gpsBegin()) {
    Serial.println("GNSS:OK(I)");
  } else {
    Serial.println("GNSS:NO");
    return false;
  }
  return true;
}

bool processGPS(CBuffer* buffer)
{
  static uint32_t lastGPStime = 0;
  static uint32_t lastGPStick = 0;
  static float lastGPSLat = 0;
  static float lastGPSLng = 0;

  if (!gd) {
    lastGPStime = 0;
    lastGPSLat = 0;
    lastGPSLng = 0;
  }
#if GNSS == GNSS_STANDALONE
  if (state.check(STATE_GPS_READY)) {
    // read parsed GPS data
    if (!sys.gpsGetData(&gd)) {
      return false;
    }
  }
#else
    if (!teleClient.cell.getLocation(&gd)) {
      return false;
    }
#endif


  if (!gd || lastGPStime == gd->time || (gd->lng == 0 && gd->lat == 0)) {
#if GNSS_RESET_TIMEOUT
    if (millis() - lastGPStick > GNSS_RESET_TIMEOUT * 1000) {
      sys.gpsEnd();
      delay(50);
      initGPS();
      lastGPStick = millis();
    }
#endif
    return false;
  }
  lastGPStick = millis();

  if ((lastGPSLat || lastGPSLng) && (abs(gd->lat - lastGPSLat) > 0.001 || abs(gd->lng - lastGPSLng) > 0.001)) {
    // invalid coordinates data
    lastGPSLat = 0;
    lastGPSLng = 0;
    return false;
  }
  lastGPSLat = gd->lat;
  lastGPSLng = gd->lng;

  float kph = gd->speed * 1.852f;
  if (kph >= 2) lastMotionTime = millis();

  if (buffer) {
    buffer->add(PID_GPS_TIME, ELEMENT_UINT32, &gd->time, sizeof(uint32_t));
    buffer->add(PID_GPS_LATITUDE, ELEMENT_FLOAT, &gd->lat, sizeof(float));
    buffer->add(PID_GPS_LONGITUDE, ELEMENT_FLOAT, &gd->lng, sizeof(float));
    buffer->add(PID_GPS_ALTITUDE, ELEMENT_FLOAT_D1, &gd->alt, sizeof(float)); /* m */
    buffer->add(PID_GPS_SPEED, ELEMENT_FLOAT_D1, &kph, sizeof(kph));
    buffer->add(PID_GPS_HEADING, ELEMENT_UINT16, &gd->heading, sizeof(uint16_t));
    if (gd->sat) buffer->add(PID_GPS_SAT_COUNT, ELEMENT_UINT8, &gd->sat, sizeof(uint8_t));
    if (gd->hdop) buffer->add(PID_GPS_HDOP, ELEMENT_UINT8, &gd->hdop, sizeof(uint8_t));
  }
  
  // generate ISO time string
  // last_time_syncronized = gd->time;

  // if (last_time_syncronized > 1718389103 && !syncronized){
  //   syncronized = true;
  // }
  char *p = isoTime + sprintf(isoTime, "%04u-%02u-%02uT%02u:%02u:%02u",
      (unsigned int)(gd->date % 100) + 2000, (unsigned int)(gd->date / 100) % 100, (unsigned int)(gd->date / 10000),
      (unsigned int)(gd->time / 1000000), (unsigned int)(gd->time % 1000000) / 10000, (unsigned int)(gd->time % 10000) / 100);
  unsigned char tenth = (gd->time % 100) / 10;
  if (tenth) p += sprintf(p, ".%c00", '0' + tenth);
  *p = 'Z';
  *(p + 1) = 0;

  Serial.print("[GPS] ");
  Serial.print(gd->lat, 6);
  Serial.print(' ');
  Serial.print(gd->lng, 6);
  Serial.print(' ');
  Serial.print((int)kph);
  Serial.print("km/h");
  Serial.print(" SATS:");
  Serial.print(gd->sat);
  Serial.print(" HDOP:");
  Serial.print(gd->hdop);
  Serial.print(" Course:");
  Serial.print(gd->heading);

  Serial.print(' ');
  Serial.println(isoTime);
  //Serial.println(gd->errors);
  lastGPStime = gd->time;
  return true;
}

bool waitMotionGPS(int timeout)
{
  unsigned long t = millis();
  lastMotionTime = 0;
  do {
      serverProcess(100);
    if (!processGPS(0)) continue;
    if (lastMotionTime) return true;
  } while (millis() - t < timeout);
  return false;
}

#if ENABLE_MEMS
void processMEMS(CBuffer* buffer)
{
  if (!state.check(STATE_MEMS_READY)) return;

  // load and store accelerometer data
  float temp;
#if ENABLE_ORIENTATION
  ORIENTATION ori;
  if (!mems->read(acc, gyr, mag, &temp, &ori)) return;
#else
  if (!mems->read(acc, gyr, mag, &temp)) return;
#endif
  deviceTemp = (int)temp;

  accSum[0] += acc[0];
  accSum[1] += acc[1];
  accSum[2] += acc[2];
  accCount++;

  if (buffer) {
    if (accCount) {
      float value[3];
      value[0] = accSum[0] / accCount - accBias[0];
      value[1] = accSum[1] / accCount - accBias[1];
      value[2] = accSum[2] / accCount - accBias[2];
      buffer->add(PID_ACC, ELEMENT_FLOAT_D2, value, sizeof(value), 3);
/*
      Serial.print("[ACC] ");
      Serial.print(value[0]);
      Serial.print('/');
      Serial.print(value[1]);
      Serial.print('/');
      Serial.println(value[2]);
*/
#if ENABLE_ORIENTATION
      value[0] = ori.yaw;
      value[1] = ori.pitch;
      value[2] = ori.roll;
      buffer->add(PID_ORIENTATION, ELEMENT_FLOAT_D2, value, sizeof(value), 3);
#endif
#if 0
      // calculate motion
      float motion = 0;
      for (byte i = 0; i < 3; i++) {
        motion += value[i] * value[i];
      }
      if (motion >= MOTION_THRESHOLD * MOTION_THRESHOLD) {
        lastMotionTime = millis();
        Serial.print("Motion:");
        Serial.println(motion);
      }
#endif
    }
    accSum[0] = 0;
    accSum[1] = 0;
    accSum[2] = 0;
    accCount = 0;
  }
}

void calibrateMEMS()
{
  if (state.check(STATE_MEMS_READY)) {
    accBias[0] = 0;
    accBias[1] = 0;
    accBias[2] = 0;
    int n;
    unsigned long t = millis();
    for (n = 0; millis() - t < 1000; n++) {
      float acc[3];
      if (!mems->read(acc)) continue;
      accBias[0] += acc[0];
      accBias[1] += acc[1];
      accBias[2] += acc[2];
      delay(10);
    }
    accBias[0] /= n;
    accBias[1] /= n;
    accBias[2] /= n;
    Serial.print("ACC BIAS:");
    Serial.print(accBias[0]);
    Serial.print('/');
    Serial.print(accBias[1]);
    Serial.print('/');
    Serial.println(accBias[2]);
  }
}
#endif

void printTime()
{
  time_t utc;
  time(&utc);
  struct tm *btm = gmtime(&utc);
  if (btm->tm_year > 100) {
    // valid system time available
    char buf[64];
    sprintf(buf, "%04u-%02u-%02u %02u:%02u:%02u",
      1900 + btm->tm_year, btm->tm_mon + 1, btm->tm_mday, btm->tm_hour, btm->tm_min, btm->tm_sec);
    Serial.print("UTC:");
    Serial.println(buf);
  }
}

/*******************************************************************************
  Initializing all data logging components
*******************************************************************************/
void initialize()
{
  // dump buffer data
  bufman.purge();

#if ENABLE_MEMS
  if (state.check(STATE_MEMS_READY)) {
    calibrateMEMS();
  }
#endif

#if GNSS == GNSS_STANDALONE
  if (!state.check(STATE_GPS_READY)) {
    if (initGPS()) {
      state.set(STATE_GPS_READY);
    }
  }
#endif

#if ENABLE_OBD
  // initialize OBD communication
  if (!state.check(STATE_OBD_READY)) {
    timeoutsOBD = 0;
    if (obd.init()) {
      Serial.println("OBD:OK");
      state.set(STATE_OBD_READY);
#if ENABLE_OLED
      oled.println("OBD OK");
#endif
    } else {
      Serial.println("OBD:NO");
      //state.clear(STATE_WORKING);
      //return;
    }
  }
#endif

#if STORAGE != STORAGE_NONE
  if (!state.check(STATE_STORAGE_READY)) {
    // init storage
    if (logger.init()) {
      state.set(STATE_STORAGE_READY);
    }
  }
  if (state.check(STATE_STORAGE_READY)) {
    fileid = logger.begin();
  }
#endif

  // re-try OBD if connection not established
#if ENABLE_OBD
  if (state.check(STATE_OBD_READY)) {
    char buf[128];
    if (obd.getVIN(buf, sizeof(buf))) {
      memcpy(vin, buf, sizeof(vin) - 1);
      Serial.print("VIN:");
      Serial.println(vin);
    }
    int dtcCount = obd.readDTC(dtc, sizeof(dtc) / sizeof(dtc[0]));
    if (dtcCount > 0) {
      Serial.print("DTC:");
      Serial.println(dtcCount);
    }
#if ENABLE_OLED
    oled.print("VIN:");
    oled.println(vin);
#endif
  }
#endif

  // check system time
  printTime();

  lastMotionTime = millis();
  state.set(STATE_WORKING);

#if ENABLE_OLED
  delay(1000);
  oled.clear();
  oled.print("DEVICE ID: ");
  oled.println(devid);
  oled.setCursor(0, 7);
  oled.print("Packets");
  oled.setCursor(80, 7);
  oled.print("KB Sent");
  oled.setFontSize(FONT_SIZE_MEDIUM);
#endif
}

void showStats()
{
  uint32_t t = millis() - teleClient.startTime;
  char buf[32];
  sprintf(buf, "%02u:%02u.%c ", t / 60000, (t % 60000) / 1000, (t % 1000) / 100 + '0');
  Serial.print("[NET] ");
  Serial.print(buf);
  Serial.print("| Packet #");
  Serial.print(teleClient.txCount);
  Serial.print(" | Out: ");
  Serial.print(teleClient.txBytes >> 10);
  Serial.print(" KB | In: ");
  Serial.print(teleClient.rxBytes);
  Serial.print(" bytes | ");
  Serial.print((unsigned int)((uint64_t)(teleClient.txBytes + teleClient.rxBytes) * 3600 / (millis() - teleClient.startTime)));
  Serial.print(" KB/h");

  Serial.println();
#if ENABLE_OLED
  oled.setCursor(0, 2);
  oled.println(timestr);
  oled.setCursor(0, 5);
  oled.printInt(teleClient.txCount, 2);
  oled.setCursor(80, 5);
  oled.printInt(teleClient.txBytes >> 10, 3);
#endif
}

bool waitMotion(long timeout)
{
#if ENABLE_MEMS
  unsigned long t = millis();
  if (state.check(STATE_MEMS_READY)) {
    do {
      // calculate relative movement
      float motion = 0;
      float acc[3];
      if (!mems->read(acc)) continue;
      if (accCount == 10) {
        accCount = 0;
        accSum[0] = 0;
        accSum[1] = 0;
        accSum[2] = 0;
      }
      accSum[0] += acc[0];
      accSum[1] += acc[1];
      accSum[2] += acc[2];
      accCount++;
      for (byte i = 0; i < 3; i++) {
        float m = (acc[i] - accBias[i]);
        motion += m * m;
      }
#if ENABLE_HTTTPD
      serverProcess(100);
#endif
      processBLE(100);
      // check movement
      if (motion >= MOTION_THRESHOLD * MOTION_THRESHOLD) {
        //lastMotionTime = millis();
        Serial.println(motion);
        return true;
      }
    } while (state.check(STATE_STANDBY) && ((long)(millis() - t) < timeout || timeout == -1));
    return false;
  }
#endif
  serverProcess(timeout);
  return false;
}

/*******************************************************************************
  Collecting and processing data
*******************************************************************************/
void process()
{
  uint32_t startTime = millis();

  CBuffer* buffer = bufman.getFree();
  buffer->state = BUFFER_STATE_FILLING;

#if ENABLE_OBD
  // process OBD data if connected
  if (state.check(STATE_OBD_READY)) {
      processOBD(buffer);
    if (obd.errors >= MAX_OBD_ERRORS) {
      if (!obd.init()) {
        Serial.println("[OBD] ECU OFF");
        state.clear(STATE_OBD_READY | STATE_WORKING);
        return;
      }
    }
  } else if (obd.init(PROTO_AUTO, true)) {
    state.set(STATE_OBD_READY);
    Serial.println("[OBD] ECU ON");
  }
#endif

  if (rssi != rssiLast) {
    int val = (rssiLast = rssi);
    buffer->add(PID_CSQ, ELEMENT_INT32, &val, sizeof(val));
  }
#if ENABLE_OBD
  if (sys.devType > 12) {
    batteryVoltage = (float)(analogRead(A0) * 45) / 4095;
  } else {
    batteryVoltage = obd.getVoltage();
  }
  if (batteryVoltage) {
    uint16_t v = batteryVoltage * 100;
    buffer->add(PID_BATTERY_VOLTAGE, ELEMENT_UINT16, &v, sizeof(v));
  }
#endif

#if LOG_EXT_SENSORS
  processExtInputs(buffer);
#endif

#if ENABLE_MEMS
  processMEMS(buffer);
#endif

  processGPS(buffer);

  if (!state.check(STATE_MEMS_READY)) {
    deviceTemp = readChipTemperature();
  }
  buffer->add(PID_DEVICE_TEMP, ELEMENT_INT32, &deviceTemp, sizeof(deviceTemp));

  buffer->timestamp = millis();
  
  buffer->state = BUFFER_STATE_FILLED;

  // display file buffer stats
  if (startTime - lastStatsTime >= 3000) {
    bufman.printStats();
    lastStatsTime = startTime;
  }

#if STORAGE != STORAGE_NONE
  if (state.check(STATE_STORAGE_READY)) {
    buffer->serialize(logger);
    uint16_t sizeKB = (uint16_t)(logger.size() >> 10);
    if (sizeKB != lastSizeKB) {
      logger.flush();
      lastSizeKB = sizeKB;
      Serial.print("[FILE] ");
      Serial.print(sizeKB);
      Serial.println("KB");
    }
  }
#endif

  const int dataIntervals[] = DATA_INTERVAL_TABLE;
#if ENABLE_OBD || ENABLE_MEMS
  // motion adaptive data interval control
  const uint16_t stationaryTime[] = STATIONARY_TIME_TABLE;
  unsigned int motionless = (millis() - lastMotionTime) / 1000;
  bool stationary = true;
  for (byte i = 0; i < sizeof(stationaryTime) / sizeof(stationaryTime[0]); i++) {
    dataInterval = dataIntervals[i];
    if (motionless < stationaryTime[i] || stationaryTime[i] == 0) {
      stationary = false;
      break;
    }
  }
  if (stationary) {
    // stationery timeout
    Serial.print("Stationary for ");
    Serial.print(motionless);
    Serial.println(" secs");
    // trip ended, go into standby
    state.clear(STATE_WORKING);
    return;
  }
#else
  dataInterval = dataIntervals[0];
#endif
  do {
    long t = dataInterval - (millis() - startTime);
    processBLE(t > 0 ? t : 0);
  } while (millis() - startTime < dataInterval);
}

bool initCell(bool quick = false)
{
  Serial.println("[CELL] Activating...");
  // power on network module
  if (!teleClient.cell.begin(&sys)) {
    Serial.println("[CELL] No supported module");
#if ENABLE_OLED
    oled.println("No Cell Module");
#endif
    return false;
  }
  if (quick) return true;
#if ENABLE_OLED
    oled.print(teleClient.cell.deviceName());
    oled.println(" OK\r");
    oled.print("IMEI:");
    oled.println(teleClient.cell.IMEI);
#endif
  Serial.print("CELL:");
  Serial.println(teleClient.cell.deviceName());
  if (!teleClient.cell.checkSIM(SIM_CARD_PIN)) {
    Serial.println("NO SIM CARD");
    //return false;
  }
  Serial.print("IMEI:");
  Serial.println(teleClient.cell.IMEI);
  Serial.println("[CELL] Searching...");
  if (*apn) {
    Serial.print("APN:");
    Serial.println(apn);
  }
  if (teleClient.cell.setup(apn, "claro", "claro")) {
    netop = teleClient.cell.getOperatorName();
    if (netop.length()) {
      Serial.print("Operator:");
      Serial.println(netop);
#if ENABLE_OLED
      oled.println(op);
#endif
    }

#if GNSS == GNSS_CELLULAR
    if (teleClient.cell.setGPS(true)) {
      Serial.println("CELL GNSS:OK");
    }
#endif

    ip = teleClient.cell.getIP();
    if (ip.length()) {
      Serial.print("[CELL] IP:");
      Serial.println(ip);
      // obtainTimeTelelogger();
#if ENABLE_OLED
      oled.print("IP:");
      oled.println(ip);
#endif
    }
    state.set(STATE_CELL_CONNECTED);
  } else {
    char *p = strstr(teleClient.cell.getBuffer(), "+CPSI:");
    if (p) {
      char *q = strchr(p, '\r');
      if (q) *q = 0;
      Serial.print("[CELL] ");
      Serial.println(p + 7);
#if ENABLE_OLED
      oled.println(p + 7);
#endif
    } else {
      Serial.print(teleClient.cell.getBuffer());
    }
  }
  timeoutsNet = 0;
  return state.check(STATE_CELL_CONNECTED);
}

/*******************************************************************************
  Initializing network, maintaining connection and doing transmissions
*******************************************************************************/
void telemetry(void* inst)
{
  uint32_t lastRssiTime = 0;
  uint8_t connErrors = 0;
  CStorageRAM store;
  store.init(
#if BOARD_HAS_PSRAM
    (char*)heap_caps_malloc(SERIALIZE_BUFFER_SIZE, MALLOC_CAP_SPIRAM),
#else
    (char*)malloc(SERIALIZE_BUFFER_SIZE),
#endif
    SERIALIZE_BUFFER_SIZE
  );
  teleClient.reset();

  for (;;) {
    if (state.check(STATE_STANDBY)) {
      if (state.check(STATE_CELL_CONNECTED) || state.check(STATE_WIFI_CONNECTED)) {
        teleClient.shutdown();
        netop = "";
        ip = "";
        rssi = 0;
      }
      state.clear(STATE_NET_READY | STATE_CELL_CONNECTED | STATE_WIFI_CONNECTED);
      teleClient.reset();
      bufman.purge();

      uint32_t t = millis();
      do {
        delay(1000);
      } while (state.check(STATE_STANDBY) && millis() - t < 1000L * PING_BACK_INTERVAL);
      if (state.check(STATE_STANDBY)) {
        // start ping
#if ENABLE_WIFI
        if (wifiSSID[0]) { 
          Serial.print("[WIFI] Joining SSID:");
          Serial.println(wifiSSID);
          teleClient.wifi.begin(wifiSSID, wifiPassword);
        }
        if (teleClient.wifi.setup()) {
          Serial.println("[WIFI] Ping...");
          teleClient.ping();
        }
        else
#endif
        {
          if (initCell()) {
            Serial.println("[CELL] Ping...");
            teleClient.ping();
          }
        }
        teleClient.shutdown();
        state.clear(STATE_CELL_CONNECTED | STATE_WIFI_CONNECTED);
      }
      continue;
    }

#if ENABLE_WIFI
    if (wifiSSID[0] && !state.check(STATE_WIFI_CONNECTED)) {
      Serial.print("[WIFI] Joining SSID:");
      Serial.println(wifiSSID);
      teleClient.wifi.begin(wifiSSID, wifiPassword);
      teleClient.wifi.setup();
    }
#endif

    while (state.check(STATE_WORKING)) {
#if ENABLE_WIFI
      if (wifiSSID[0]) {
        if (!state.check(STATE_WIFI_CONNECTED) && teleClient.wifi.connected()) {
          ip = teleClient.wifi.getIP();
          if (ip.length()) {
            Serial.print("[WIFI] IP:");
            Serial.println(ip);
          }

          if(!time_obtained){
            // obtainTimeTelelogger();
            // time_obtained = true;
          }
          connErrors = 0;
          if (teleClient.connect()) {
            state.set(STATE_WIFI_CONNECTED | STATE_NET_READY);
            beep(50);
            // switch off cellular module when wifi connected
            if (state.check(STATE_CELL_CONNECTED)) {
              teleClient.cell.end();
              state.clear(STATE_CELL_CONNECTED);
              Serial.println("[CELL] Deactivated");
            }
          }
        } else if (state.check(STATE_WIFI_CONNECTED) && !teleClient.wifi.connected()) {
          Serial.println("[WIFI] Disconnected");
          state.clear(STATE_WIFI_CONNECTED);
        }
      }
#endif
      if (!state.check(STATE_WIFI_CONNECTED) && !state.check(STATE_CELL_CONNECTED)) {
        connErrors = 0;
        if (!initCell() || !teleClient.connect()) {
          teleClient.cell.end();
          state.clear(STATE_NET_READY | STATE_CELL_CONNECTED);
          break;
        }
        Serial.println("[CELL] In service");
        state.set(STATE_NET_READY);
        beep(50);
      }

      if (millis() - lastRssiTime > SIGNAL_CHECK_INTERVAL * 1000) {
#if ENABLE_WIFI
        if (state.check(STATE_WIFI_CONNECTED))
        {
          rssi = teleClient.wifi.RSSI();
        }
        else
#endif
        {
          rssi = teleClient.cell.RSSI();
        }
        if (rssi) {
          Serial.print("RSSI:");
          Serial.print(rssi);
          Serial.println("dBm");
        }
        lastRssiTime = millis();

#if ENABLE_WIFI
        if (wifiSSID[0] && !state.check(STATE_WIFI_CONNECTED)) {
          teleClient.wifi.begin(wifiSSID, wifiPassword);
        }
#endif
      }

      // get data from buffer
      CBuffer* buffer = bufman.getNewest();
      if (!buffer) {
        delay(50);
        continue;
      }
#if SERVER_PROTOCOL == PROTOCOL_UDP
      store.header(devid);
#endif
      store.timestamp(buffer->timestamp);
      buffer->serialize(store);
      bufman.free(buffer);
      store.tailer();
      Serial.print("[DAT] ");
      Serial.println(store.buffer());

      // start transmission
#ifdef PIN_LED
      if (ledMode == 0) digitalWrite(PIN_LED, HIGH);
#endif

      if (teleClient.transmit(store.buffer(), store.length())) {
        // successfully sent
        connErrors = 0;
        showStats();
      } else {
        timeoutsNet++;
        connErrors++;
        printTimeoutStats();
        if (connErrors < MAX_CONN_ERRORS_RECONNECT) {
          // quick reconnect
          teleClient.connect(true);
        }
      }
#ifdef PIN_LED
      if (ledMode == 0) digitalWrite(PIN_LED, LOW);
#endif
      store.purge();

      teleClient.inbound();

      if (state.check(STATE_CELL_CONNECTED) && !teleClient.cell.check(1000)) {
        Serial.println("[CELL] Not in service");
        state.clear(STATE_NET_READY | STATE_CELL_CONNECTED);
        break;
      }

      if (syncInterval > 10000 && millis() - teleClient.lastSyncTime > syncInterval) {
        Serial.println("[NET] Poor connection");
        timeoutsNet++;
        if (!teleClient.connect()) {
          connErrors++;
        }
      }

      if (connErrors >= MAX_CONN_ERRORS_RECONNECT) {
#if ENABLE_WIFI
        if (state.check(STATE_WIFI_CONNECTED)) {
          teleClient.wifi.end();
          state.clear(STATE_NET_READY | STATE_WIFI_CONNECTED);
          break;
        }
#endif
        if (state.check(STATE_CELL_CONNECTED)) {
          teleClient.cell.end();
          state.clear(STATE_NET_READY | STATE_CELL_CONNECTED);
          break;
        }
      }

      if (deviceTemp >= COOLING_DOWN_TEMP) {
        // device too hot, cool down by pause transmission
        Serial.print("HIGH DEVICE TEMP: ");
        Serial.println(deviceTemp);
        bufman.purge();
      }

    }
  }
}

/*******************************************************************************
  Implementing stand-by mode
*******************************************************************************/
void standby()
{
  state.set(STATE_STANDBY);
#if STORAGE != STORAGE_NONE
  if (state.check(STATE_STORAGE_READY)) {
    logger.end();
  }
#endif

#if !GNSS_ALWAYS_ON && GNSS == GNSS_STANDALONE
  if (state.check(STATE_GPS_READY)) {
    Serial.println("[GPS] OFF");
    sys.gpsEnd(true);
    state.clear(STATE_GPS_READY);
    gd = 0;
  }
#endif

  state.clear(STATE_WORKING | STATE_OBD_READY | STATE_STORAGE_READY);
  // this will put co-processor into sleep mode
#if ENABLE_OLED
  oled.print("STANDBY");
  delay(1000);
  oled.clear();
#endif
  Serial.println("STANDBY");
  obd.enterLowPowerMode();
#if ENABLE_MEMS
  calibrateMEMS();
  waitMotion(-1);
#elif ENABLE_OBD
  do {
    delay(5000);
  } while (obd.getVoltage() < JUMPSTART_VOLTAGE);
#else
  delay(5000);
#endif
  Serial.println("WAKEUP");
  sys.resetLink();
#if RESET_AFTER_WAKEUP
#if ENABLE_MEMS
  if (mems) mems->end();  
#endif
  ESP.restart();
#endif  
  state.clear(STATE_STANDBY);
}

/*******************************************************************************
  Tasks to perform in idle/waiting time
*******************************************************************************/
void genDeviceID(char* buf)
{
    uint64_t seed = ESP.getEfuseMac() >> 8;
    for (int i = 0; i < 8; i++, seed >>= 5) {
      byte x = (byte)seed & 0x1f;
      if (x >= 10) {
        x = x - 10 + 'A';
        switch (x) {
          case 'B': x = 'W'; break;
          case 'D': x = 'X'; break;
          case 'I': x = 'Y'; break;
          case 'O': x = 'Z'; break;
        }
      } else {
        x += '0';
      }
      buf[i] = x;
    }
    buf[8] = 0;
}

void showSysInfo()
{
  Serial.print("CPU:");
  Serial.print(ESP.getCpuFreqMHz());
  Serial.print("MHz FLASH:");
  Serial.print(ESP.getFlashChipSize() >> 20);
  Serial.println("MB");
  Serial.print("IRAM:");
  Serial.print(ESP.getHeapSize() >> 10);
  Serial.print("KB");
#if BOARD_HAS_PSRAM
  if (psramInit()) {
    Serial.print(" PSRAM:");
    Serial.print(esp_spiram_get_size() >> 20);
    Serial.print("MB");
  }
#endif
  Serial.println();

  int rtc = rtc_clk_slow_freq_get();
  if (rtc) {
    Serial.print("RTC:");
    Serial.println(rtc);
  }

#if ENABLE_OLED
  oled.clear();
  oled.print("CPU:");
  oled.print(ESP.getCpuFreqMHz());
  oled.print("Mhz ");
  oled.print(getFlashSize() >> 10);
  oled.println("MB Flash");
#endif

  Serial.print("DEVICE ID:");
  Serial.println(devid);
#if ENABLE_OLED
  oled.print("DEVICE ID:");
  oled.println(devid);
#endif
}

void loadConfig()
{
  size_t len;
  len = sizeof(apn);
  apn[0] = 0;
  nvs_get_str(nvs, "CELL_APN", apn, &len);
  if (!apn[0]) {
    strcpy(apn, CELL_APN);
  }

#if ENABLE_WIFI
  len = sizeof(wifiSSID);
  nvs_get_str(nvs, "WIFI_SSID", wifiSSID, &len);
  len = sizeof(wifiPassword);
  nvs_get_str(nvs, "WIFI_PWD", wifiPassword, &len);
#endif
}

void processBLE(int timeout)
{
#if ENABLE_BLE
  static byte echo = 0;
  char* cmd;
  if (!(cmd = ble_recv_command(timeout))) {
    return;
  }

  char *p = strchr(cmd, '\r');
  if (p) *p = 0;
  char buf[48];
  int bufsize = sizeof(buf);
  int n = 0;
  if (echo) n += snprintf(buf + n, bufsize - n, "%s\r", cmd);
  Serial.print("[BLE] ");
  Serial.print(cmd);
  if (!strcmp(cmd, "UPTIME") || !strcmp(cmd, "TICK")) {
    n += snprintf(buf + n, bufsize - n, "%lu", millis());
  } else if (!strcmp(cmd, "BATT")) {
    n += snprintf(buf + n, bufsize - n, "%.2f", (float)(analogRead(A0) * 42) / 4095);
  } else if (!strcmp(cmd, "RESET")) {
#if STORAGE
    logger.end();
#endif
    ESP.restart();
    // never reach here
  } else if (!strcmp(cmd, "OFF")) {
    state.set(STATE_STANDBY);
    state.clear(STATE_WORKING);
    n += snprintf(buf + n, bufsize - n, "OK");
  } else if (!strcmp(cmd, "ON")) {
    state.clear(STATE_STANDBY);
    n += snprintf(buf + n, bufsize - n, "OK");
  } else if (!strcmp(cmd, "ON?")) {
    n += snprintf(buf + n, bufsize - n, "%u", state.check(STATE_STANDBY) ? 0 : 1);
  } else if (!strcmp(cmd, "APN?")) {
    n += snprintf(buf + n, bufsize - n, "%s", *apn ? apn : "DEFAULT");
  } else if (!strncmp(cmd, "APN=", 4)) {
    n += snprintf(buf + n, bufsize - n, nvs_set_str(nvs, "CELL_APN", strcmp(cmd + 4, "DEFAULT") ? cmd + 4 : "") == ESP_OK ? "OK" : "ERR");
    loadConfig();
  } else if (!strcmp(cmd, "NET_OP")) {
    if (state.check(STATE_WIFI_CONNECTED)) {
#if ENABLE_WIFI
      n += snprintf(buf + n, bufsize - n, "%s", wifiSSID[0] ? wifiSSID : "-");
#endif
    } else {
      snprintf(buf + n, bufsize - n, "%s", netop.length() ? netop.c_str() : "-");
      char *p = strchr(buf + n, ' ');
      if (p) *p = 0;
      n += strlen(buf + n);
    }
  } else if (!strcmp(cmd, "NET_IP")) {
    n += snprintf(buf + n, bufsize - n, "%s", ip.length() ? ip.c_str() : "-");
  } else if (!strcmp(cmd, "NET_PACKET")) {
      n += snprintf(buf + n, bufsize - n, "%u", teleClient.txCount);
  } else if (!strcmp(cmd, "NET_DATA")) {
      n += snprintf(buf + n, bufsize - n, "%u", teleClient.txBytes);
  } else if (!strcmp(cmd, "NET_RATE")) {
      n += snprintf(buf + n, bufsize - n, "%u", teleClient.startTime ? (unsigned int)((uint64_t)(teleClient.txBytes + teleClient.rxBytes) * 3600 / (millis() - teleClient.startTime)) : 0);
  } else if (!strcmp(cmd, "RSSI")) {
    n += snprintf(buf + n, bufsize - n, "%d", rssi);
#if ENABLE_WIFI
  } else if (!strcmp(cmd, "SSID?")) {
    n += snprintf(buf + n, bufsize - n, "%s", wifiSSID[0] ? wifiSSID : "-");
  } else if (!strncmp(cmd, "SSID=", 5)) {
    const char* p = cmd + 5;
    n += snprintf(buf + n, bufsize - n, nvs_set_str(nvs, "WIFI_SSID", strcmp(p, "-") ? p : "") == ESP_OK ? "OK" : "ERR");
    loadConfig();
  } else if (!strcmp(cmd, "WPWD?")) {
    n += snprintf(buf + n, bufsize - n, "%s", wifiPassword[0] ? wifiPassword : "-");
  } else if (!strncmp(cmd, "WPWD=", 5)) {
    const char* p = cmd + 5;
    n += snprintf(buf + n, bufsize - n, nvs_set_str(nvs, "WIFI_PWD", strcmp(p, "-") ? p : "") == ESP_OK ? "OK" : "ERR");
    loadConfig();
#else
  } else if (!strcmp(cmd, "SSID?") || !strcmp(cmd, "WPWD?")) {
    n += snprintf(buf + n, bufsize - n, "-");
#endif
#if ENABLE_MEMS
  } else if (!strcmp(cmd, "TEMP")) {
    n += snprintf(buf + n, bufsize - n, "%d", (int)deviceTemp);
  } else if (!strcmp(cmd, "ACC")) {
    n += snprintf(buf + n, bufsize - n, "%.1f/%.1f/%.1f", acc[0], acc[1], acc[2]);
  } else if (!strcmp(cmd, "GYRO")) {
    n += snprintf(buf + n, bufsize - n, "%.1f/%.1f/%.1f", gyr[0], gyr[1], gyr[2]);
  } else if (!strcmp(cmd, "GF")) {
    n += snprintf(buf + n, bufsize - n, "%f", (float)sqrt(acc[0]*acc[0] + acc[1]*acc[1] + acc[2]*acc[2]));
#endif
  } else if (!strcmp(cmd, "ATE0")) {
    echo = 0;
    n += snprintf(buf + n, bufsize - n, "OK");
  } else if (!strcmp(cmd, "ATE1")) {
    echo = 1;
    n += snprintf(buf + n, bufsize - n, "OK");
  } else if (!strcmp(cmd, "FS")) {
    n += snprintf(buf + n, bufsize - n, "%u",
#if STORAGE == STORAGE_NONE
    0
#else
    logger.size()
#endif
      );
  } else if (!memcmp(cmd, "01", 2)) {
    byte pid = hex2uint8(cmd + 2);
    for (byte i = 0; i < sizeof(obdData) / sizeof(obdData[0]); i++) {
      if (obdData[i].pid == pid) {
        n += snprintf(buf + n, bufsize - n, "%d", obdData[i].value);
        pid = 0;
        break;
      }
    }
    if (pid) {
      int value;
      if (obd.readPID(pid, value)) {
        n += snprintf(buf + n, bufsize - n, "%d", value);
      } else {
        n += snprintf(buf + n, bufsize - n, "N/A");
      }
    }
  } else if (!strcmp(cmd, "VIN")) {
    n += snprintf(buf + n, bufsize - n, "%s", vin[0] ? vin : "N/A");
  } else if (!strcmp(cmd, "LAT") && gd) {
    n += snprintf(buf + n, bufsize - n, "%f", gd->lat);
  } else if (!strcmp(cmd, "LNG") && gd) {
    n += snprintf(buf + n, bufsize - n, "%f", gd->lng);
  } else if (!strcmp(cmd, "ALT") && gd) {
    n += snprintf(buf + n, bufsize - n, "%d", (int)gd->alt);
  } else if (!strcmp(cmd, "SAT") && gd) {
    n += snprintf(buf + n, bufsize - n, "%u", (unsigned int)gd->sat);
  } else if (!strcmp(cmd, "SPD") && gd) {
    n += snprintf(buf + n, bufsize - n, "%d", (int)(gd->speed * 1852 / 1000));
  } else if (!strcmp(cmd, "CRS") && gd) {
    n += snprintf(buf + n, bufsize - n, "%u", (unsigned int)gd->heading);
  } else {
    n += snprintf(buf + n, bufsize - n, "ERROR");
  }
  Serial.print(" -> ");
  Serial.println((p = strchr(buf, '\r')) ? p + 1 : buf);
  if (n < bufsize - 1) {
    buf[n++] = '\r';
  } else {
    n = bufsize - 1;
  }
  buf[n] = 0;
  ble_send_response(buf, n, cmd);
#else
  if (timeout) delay(timeout);
#endif
}

void setup()
{
  delay(500);

  // Initialize NVS
  esp_err_t err = nvs_flash_init();
  if (err == ESP_ERR_NVS_NO_FREE_PAGES || err == ESP_ERR_NVS_NEW_VERSION_FOUND) {
    // NVS partition was truncated and needs to be erased
    // Retry nvs_flash_init
    ESP_ERROR_CHECK(nvs_flash_erase());
    err = nvs_flash_init();
  }
  ESP_ERROR_CHECK( err );
  err = nvs_open("storage", NVS_READWRITE, &nvs);
  if (err == ESP_OK) {
    loadConfig();
  }

#if ENABLE_OLED
  oled.begin();
  oled.setFontSize(FONT_SIZE_SMALL);
#endif
  // initialize USB serial
  Serial.begin(115200);

  // init LED pin
#ifdef PIN_LED
  pinMode(PIN_LED, OUTPUT);
  if (ledMode == 0) digitalWrite(PIN_LED, HIGH);
#endif

  // generate unique device ID
  genDeviceID(devid);

#if CONFIG_MODE_TIMEOUT
  configMode();
#endif

#if LOG_EXT_SENSORS == 1
  pinMode(PIN_SENSOR1, INPUT);
  pinMode(PIN_SENSOR2, INPUT);
#elif LOG_EXT_SENSORS == 2
  adc1_config_width(ADC_WIDTH_BIT_12);
  adc1_config_channel_atten(ADC1_CHANNEL_0, ADC_ATTEN_DB_11);
  adc1_config_channel_atten(ADC1_CHANNEL_1, ADC_ATTEN_DB_11);
#endif

  // show system information
  showSysInfo();

  bufman.init();
  
  //Serial.print(heap_caps_get_free_size(MALLOC_CAP_SPIRAM) >> 10);
  //Serial.println("KB");

#if ENABLE_OBD
  if (sys.begin()) {
    Serial.print("TYPE:");
    Serial.println(sys.devType);
    obd.begin(sys.link);
  }
#else
  sys.begin(false, true);
#endif

#if ENABLE_MEMS
if (!state.check(STATE_MEMS_READY)) do {
  Serial.print("MEMS:");
  mems = new ICM_42627;
  byte ret = mems->begin();
  if (ret) {
    state.set(STATE_MEMS_READY);
    Serial.println("ICM-42627");
    break;
  }
  delete mems;
  mems = new ICM_20948_I2C;
  ret = mems->begin();
  if (ret) {
    state.set(STATE_MEMS_READY);
    Serial.println("ICM-20948");
    break;
  } 
  delete mems;
  /*
  mems = new MPU9250;
  ret = mems->begin();
  if (ret) {
    state.set(STATE_MEMS_READY);
    Serial.println("MPU-9250");
    break;
  }
  */
  mems = 0;
  Serial.println("NO");
} while (0);
#endif

#if ENABLE_HTTPD
  IPAddress ip;
  if (serverSetup(ip)) {
    Serial.println("HTTPD:");
    Serial.println(ip);
#if ENABLE_OLED
    oled.println(ip);
#endif
  } else {
    Serial.println("HTTPD:NO");
  }
#endif

  state.set(STATE_WORKING);

#if ENABLE_BLE
  // init BLE
  ble_init("FreematicsPlus");
#endif

  // initialize components
  initialize();

  intializeTensorFlow();

  // initialize network and maintain connection
  subtask.create(telemetry, "telemetry", 2, 8192);

#ifdef PIN_LED
  digitalWrite(PIN_LED, LOW);
#endif
}

void loop()
{
  // error handling
  if (!state.check(STATE_WORKING)) {
    standby();
#ifdef PIN_LED
    if (ledMode == 0) digitalWrite(PIN_LED, HIGH);
#endif
    initialize();
    verifyAndResetFile("/data_autoencoder_c4.txt");
#ifdef PIN_LED
    digitalWrite(PIN_LED, LOW);
#endif
    return;
  }

  // collect and log data
  process();
}